name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install Dependencies
        run: npm install

      - name: Pack
        run: npm run pack

      - name: Get Module ID
        id: moduleID
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'module.json'
          prop_path: 'id'

      - name: Get Minimum
        id: minimum
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'module.json'
          prop_path: 'compatibility.minimum'

      - name: Get Verified
        id: verified
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'module.json'
          prop_path: 'compatibility.verified'

      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: "module.json"
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/${{steps.moduleID.outputs.prop}}.zip

      - run: zip -r ./${{steps.moduleID.outputs.prop}}.zip assets/ css/ data/ lang/ packs/ modules/ templates/ LICENSE README.md module.json ${{steps.moduleID.outputs.prop}}.mjs

      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.unpublished }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./module.json, ./${{steps.moduleID.outputs.prop}}.zip"
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
          generateReleaseNotes: true

      - name: Foundry Release API
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.foundryvtt.com/_api/packages/release_version'
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json", "Authorization" : "${{ secrets.FOUNDRY_KEY }}"}'
          data: '{"dry_run": false, "id": "${{steps.moduleID.outputs.prop}}", "release": {"version":  "${{github.event.release.tag_name}}", "manifest": "https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.json", "compatibility" : {"minimum": "${{steps.minimum.outputs.prop}}", "verified": "${{steps.verified.outputs.prop}}"}}}'
