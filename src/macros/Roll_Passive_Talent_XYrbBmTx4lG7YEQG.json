{
  "_id": "XYrbBmTx4lG7YEQG",
  "author": "MJAZjdKh3QKREKG2",
  "command": "/* ==========\n* MACRO: Roll Passive Talent\n* AUTHOR: Robak132\n* DESCRIPTION: Allows for easier interaction with passive talents like Sixth Sense and Trapper.\n========== */\n\nconst PASSIVE_TALENTS = [\n  {\n    skill: game.i18n.localize(\"NAME.Perception\")\n  },\n  {\n    talent: game.i18n.localize(\"NAME.SixthSense\"),\n    skill: game.i18n.localize(\"NAME.Intuition\")\n  },\n  {\n    talent: game.i18n.localize(\"NAME.Trapper\"),\n    skill: game.i18n.localize(\"NAME.Perception\")\n  }\n];\n\nasync function passiveTalentMacro() {\n  if (!game.user.isGM) {\n    ui.notifications.error(game.i18n.localize(\"MACROS-AND-MORE.NoPermission\"));\n    return;\n  }\n  let msg = \"\";\n  for (const {skill, talent} of PASSIVE_TALENTS) {\n    const targetGroup = game.actors.filter((a) => {\n      return (\n        a.hasPlayerOwner &&\n        a.type !== \"vehicle\" &&\n        (talent == null || a.itemTypes.talent.some((i) => i.name === talent))\n      );\n    });\n    if (targetGroup.length === 0) {\n      continue;\n    }\n\n    let icon = `<i class='fas fa-xmark'></i>`;\n    let contentMsg = ``;\n    for (const actor of targetGroup) {\n      if (actor == null) continue;\n      let testResult = await runActorTest(actor, skill, talent);\n      if (testResult.outcome === \"success\") {\n        contentMsg += `<span style=\"color: green\"><i class='fas fa-check'></i> <strong>${actor.name}: ${testResult[\"SL\"]} SL</strong> (${testResult.roll} vs ${testResult.target})</span></br>`;\n        icon = `<i class='fas fa-check'></i>`;\n      } else {\n        contentMsg += `<span style=\"color: red\"><i class='fas fa-xmark'></i> <strong>${actor.name}: ${testResult[\"SL\"]} SL</strong> (${testResult.roll} vs ${testResult.target})</span></br>`;\n      }\n    }\n    msg += `<h3>${icon} ${talent ? talent : skill}</h3><p>${contentMsg}</p>`;\n  }\n\n  await ChatMessage.create({\n    content: msg,\n    whisper: game.users.filter((u) => u.isGM).map((u) => u.id)\n  });\n}\n\nasync function runActorTest(actor, skill, talent) {\n  let actorSkill = actor.items.find((i) => i.type === \"skill\" && i.name === skill);\n  const setupData = {\n    testModifier: 0,\n    fields: {\n      rollMode: \"blindroll\",\n      difficulty: \"challenging\"\n    },\n    passiveTest: true,\n    title: talent ? `${talent} (${actorSkill?.name})` : `${skill} (${actorSkill?.name}}`\n  };\n  if (actorSkill !== undefined) {\n    let test = await actor.setupSkill(actorSkill, setupData);\n    await test.roll();\n    return test.result;\n  } else {\n    actorSkill = await game.wfrp4e.utility.findSkill(skill);\n    const skillCharacteristic = game.wfrp4e.config.characteristics[actorSkill.characteristic.value];\n    setupData.title = talent ? `${talent} (${skillCharacteristic})` : skillCharacteristic;\n\n    let test = await actor.setupCharacteristic(actorSkill.characteristic.value, setupData);\n    await test.roll();\n    return test.result;\n  }\n}\n\npassiveTalentMacro();\n",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "2.1.0",
      "sourceId": "XYrbBmTx4lG7YEQG"
    }
  },
  "folder": null,
  "img": "modules/wfrp4e-macros-and-more/assets/icons/roll-passive-talent.svg",
  "name": "Roll Passive Talent",
  "scope": "global",
  "type": "script",
  "_key": "!macros!XYrbBmTx4lG7YEQG"
}
