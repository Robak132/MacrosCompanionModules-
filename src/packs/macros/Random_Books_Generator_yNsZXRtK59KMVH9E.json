{
  "_id": "yNsZXRtK59KMVH9E",
  "author": "MJAZjdKh3QKREKG2",
  "command": "const BOOK_QUALITY = [\n  {min: 1, max: 3, result: {value: \"Best\", worth: 900}},\n  {min: 4, max: 10, result: {value: \"Good\", worth: 200}},\n  {min: 11, max: 80, result: {value: \"Common\", worth: 0}},\n  {min: 81, max: 100, result: {value: \"Poor\", worth: -25}}\n];\n\nconst BOOK_TOPIC = [\n  {min: 1, max: 25, result: {value: \"Biography\"}},\n  {min: 26, max: 30, result: {value: \"Bestiary\"}},\n  {min: 31, max: 50, result: {value: \"Cook Book\"}},\n  {min: 51, max: 60, result: {value: \"Fiction\"}},\n  {min: 61, max: 70, result: {value: \"Guidebook or Travel Account\"}},\n  {min: 71, max: 80, result: {value: \"Religious Doctrine\"}},\n  {min: 81, max: 98, result: {value: \"Scholarship\"}},\n  {min: 99, max: 100, result: {value: \"Forbidden, Exotic or Heretical Topic\"}}\n];\n\nasync function rollFromTableCode(table) {\n  let roll = (await new Roll(`1d100`).roll()).total;\n  return table.find((entity) => entity.min <= roll && entity.max >= roll);\n}\n\nasync function generate_book() {\n  let worthModifier = 100;\n\n  // Quality\n  let bookQuality = await rollFromTableCode(BOOK_QUALITY);\n  Utility.log(bookQuality);\n  worthModifier += bookQuality.result.worth;\n\n  // Topic\n  let bookTopic = await rollFromTableCode(BOOK_TOPIC);\n  Utility.log(bookTopic);\n\n  // Pages\n  let bookPages = (await new Roll(`1d10`).roll()).total * 50;\n  Utility.log(bookPages);\n\n  // Type\n  let bookType = await game.wfrp4e.tables.rollTable(\"books-type\", {hideDSN: true});\n  Utility.log(bookType);\n\n  // Age\n  let bookAge = await game.wfrp4e.tables.rollTable(\"books-age\", {hideDSN: true});\n  let bookAgeDetailed = (await new Roll(`1d10`).roll()).total * bookAge.object.flags.age.modifier;\n  Utility.log(bookAge);\n\n  // Condition\n  let bookCondition = await game.wfrp4e.tables.rollTable(\"books-condition\", {\n    modifier: bookAge.object.flags.age.condition,\n    minOne: true,\n    hideDSN: true\n  });\n  worthModifier += bookCondition.object.flags.worth ?? 0;\n  let bookConditionResult = bookCondition.result;\n  for (const obj of Object.entries(bookCondition.object.flags.rolls ?? {})) {\n    if (bookCondition.roll === obj[0]) {\n      bookConditionResult += obj[1];\n    }\n  }\n  Utility.log(bookCondition);\n\n  // Features\n  let bookFeatures = await game.wfrp4e.tables.rollTable(\"books-features\", {hideDSN: true});\n  Utility.log(bookFeatures);\n\n  // Features\n  let bookLanguage = await game.wfrp4e.tables.rollTable(\"books-language\", {hideDSN: true});\n  let bookLanguageResult = bookLanguage.result;\n  if (bookLanguage.roll % 11 === 0 || bookLanguage.roll === 100) {\n    let originalBookLanguage = await game.wfrp4e.tables.rollTable(\"books-original-language\", {hideDSN: true});\n    bookLanguageResult = `${bookLanguageResult} (Translated from ${originalBookLanguage.result})`;\n  }\n  Utility.log(bookLanguage);\n\n  // Name\n  let topic = bookTopic.result.value.toLowerCase();\n  let name = \"Random Book\";\n  switch (topic) {\n    case \"biography\":\n      let reverse = false;\n      let element_1 = await game.wfrp4e.tables.rollTable(`books-${topic}-1`, {hideDSN: true});\n      while (element_1.roll > 98) {\n        element_1 = await game.wfrp4e.tables.rollTable(`books-${topic}-1`, {hideDSN: true});\n        reverse = !reverse;\n      }\n      let element_2 = await game.wfrp4e.tables.rollTable(`books-${topic}-2`, {hideDSN: true});\n      while (element_2.roll > 98) {\n        element_2 = await game.wfrp4e.tables.rollTable(`books-${topic}-2`, {hideDSN: true});\n        reverse = !reverse;\n      }\n      let element_3 = await game.wfrp4e.tables.rollTable(`books-${topic}-3`, {hideDSN: true});\n      let element_4 = await game.wfrp4e.tables.rollTable(`books-${topic}-4`, {hideDSN: true});\n\n      if (!reverse) {\n        name = [element_1.result, element_2.result, element_3.result].join(\" \");\n      } else {\n        name = [element_2.result, element_1.result, element_3.result].join(\" \");\n      }\n      name += `: ${element_4.result}`;\n      break;\n  }\n\n  let description = `\n\t\t<p><strong>Quality:</strong> ${bookQuality.result.value}</p>\n\t\t<p><strong>Topic:</strong> ${bookTopic.result.value}</p>\n\t\t<p><strong>Pages:</strong> ${bookPages}</p>\n\t\t<p><strong>Type:</strong> ${bookType.result}</p>\n\t\t<p><strong>Age:</strong> ${bookAge.result} (${bookAgeDetailed} ${bookAge.object.flags.age.label})</p>\n\t\t<p><strong>Condition:</strong> ${bookConditionResult}</p>\n\t\t<p><strong>Notable Features:</strong> ${bookFeatures.result}</p>\n\t\t<p><strong>Language:</strong> ${bookLanguageResult}</p>`;\n\n  for (const dice of description.match(/[0-9]*d[1-9][0-9]*/g) ?? []) {\n    description = description.replace(dice, (await new Roll(dice).roll()).total);\n  }\n\n  for (const origin of name.match(/\\[\\[origin]]/g) ?? []) {\n    name = name.replace(origin, (await game.wfrp4e.tables.rollTable(`books-origin`, {hideDSN: true})).result);\n  }\n\n  for (const human_name of name.match(/\\[\\[name]]/g) ?? []) {\n    name = name.replace(human_name, NameGenWfrp.generateName({species: \"Human\", gender: \"Male\"}));\n  }\n\n  return {\n    name: name,\n    type: \"trapping\",\n    img: \"modules/wfrp4e-core/icons/equipment/book_documents/book-apothecary.png\",\n    data: {\n      trappingType: {\n        value: \"booksAndDocuments\"\n      },\n      description: {\n        value: description\n      },\n      gmdescription: {\n        value: `<p><strong>Worth Modifier:</strong> ${worthModifier}%</p>`\n      },\n      encumbrance: {value: 1}\n    }\n  };\n}\n\nlet books_amount = 1;\nfor (let i = 0; i < books_amount; i++) {\n  ItemWfrp4e.create(await generate_book()).then((itl) => {\n    ChatMessage.create(\n      {\n        content:\n          \"<h1>Random Books Generator</h1><p>@Item[\" +\n          itl.id +\n          \"]{\" +\n          itl.name +\n          \"}</p><p>\" +\n          itl.description.value +\n          \"</p>\"\n      },\n      false\n    );\n  });\n}\n",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "1.0.0",
      "sourceId": "yNsZXRtK59KMVH9E"
    }
  },
  "folder": null,
  "img": "icons/svg/dice-target.svg",
  "name": "Random Books Generator",
  "scope": "global",
  "type": "script",
  "_key": "!macros!yNsZXRtK59KMVH9E"
}
