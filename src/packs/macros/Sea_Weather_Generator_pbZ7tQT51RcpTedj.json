{
  "_id": "pbZ7tQT51RcpTedj",
  "author": "MJAZjdKh3QKREKG2",
  "command": "/* ==========\n* MACRO: Sea Weather Generator\n* AUTHOR: Robak132\n* DESCRIPTION: Generates weather with Sea of Claws rules.\n========== */\n\n// Winds //\nclass Direction {\n  static NORTH = new Direction(0, \"North\", \"🔼\");\n  static EAST = new Direction(1, \"East\", \"▶️\");\n  static SOUTH = new Direction(2, \"South\", \"🔽\");\n  static WEST = new Direction(3, \"West\", \"◀️\");\n\n  static values = [Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST];\n\n  constructor(key, value, icon) {\n    this.key = key;\n    this.value = value;\n    this.icon = icon;\n  }\n\n  static fromValue(value) {\n    return Direction.values.find((e) => e.value === value);\n  }\n\n  static getWindDirectionTable(prevailingWind) {\n    return [\n      {\n        min: 1,\n        result: Direction.fromValue(prevailingWind)\n      },\n      {\n        min: 7,\n        result: Direction.NORTH\n      },\n      {\n        min: 8,\n        result: Direction.SOUTH\n      },\n      {\n        min: 9,\n        result: Direction.EAST\n      },\n      {\n        min: 10,\n        result: Direction.WEST\n      }\n    ];\n  }\n\n  static async randomWindDirection(prevailingWind) {\n    return await game.robakMacros.utils.rollFromCodeObject({\n      table: this.getWindDirectionTable(prevailingWind),\n      dice: \"1d10\"\n    });\n  }\n\n  opposite() {\n    return Direction.values[(this.key + 2) % 4];\n  }\n\n  getAdj() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.\" + this.value + \"Adj\");\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.\" + this.value);\n  }\n}\n\nclass WindStrength {\n  static DOLDRUMS = new WindStrength(0, \"Doldrums\", \"0️⃣\");\n  static LIGHT_BREEZE = new WindStrength(1, \"LightBreeze\", \"1️⃣\");\n  static FRESH_BREEZE = new WindStrength(2, \"FreshBreeze\", \"2️⃣\");\n  static NEAR_GALE = new WindStrength(3, \"NearGale\", \"3️⃣\");\n  static STRONG_GALE = new WindStrength(4, \"StrongGale\", \"4️⃣\");\n  static VIOLENT_STORM = new WindStrength(5, \"ViolentStorm\", \"5️⃣\");\n\n  static WIND_STRENGTH = [\n    {\n      min: 1,\n      result: WindStrength.DOLDRUMS\n    },\n    {\n      min: 2,\n      result: WindStrength.LIGHT_BREEZE\n    },\n    {\n      min: 3,\n      result: WindStrength.FRESH_BREEZE\n    },\n    {\n      min: 5,\n      result: WindStrength.NEAR_GALE\n    },\n    {\n      min: 7,\n      result: WindStrength.STRONG_GALE\n    },\n    {\n      min: 9,\n      result: WindStrength.VIOLENT_STORM\n    },\n    {\n      min: 10,\n      result: WindStrength.NEAR_GALE\n    },\n    {\n      min: 11,\n      result: WindStrength.FRESH_BREEZE\n    },\n    {\n      min: 13,\n      result: WindStrength.LIGHT_BREEZE\n    },\n    {\n      min: 14,\n      result: WindStrength.DOLDRUMS\n    }\n  ];\n\n  static values = [\n    WindStrength.DOLDRUMS,\n    WindStrength.LIGHT_BREEZE,\n    WindStrength.FRESH_BREEZE,\n    WindStrength.NEAR_GALE,\n    WindStrength.STRONG_GALE,\n    WindStrength.VIOLENT_STORM\n  ];\n\n  constructor(key, value, icon) {\n    this.key = key;\n    this.value = value;\n    this.icon = icon;\n  }\n\n  static fromValue(value) {\n    return WindStrength.values.find((e) => e.value === value);\n  }\n\n  static async random(seasonModifier) {\n    return await game.robakMacros.utils.rollFromCodeObject({\n      table: this.WIND_STRENGTH,\n      dice: \"1d10\",\n      modifier: seasonModifier\n    });\n  }\n\n  increase() {\n    return WindStrength.values[this.key + 1];\n  }\n\n  decrease() {\n    return WindStrength.values[this.key - 1];\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.\" + this.value);\n  }\n}\n\nclass Wind {\n  static WIND_EFFECT = {\n    Sail: {\n      Tailwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1.1},\n        NearGale: {modifier: 1.25},\n        StrongGale: {modifier: 1.25},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Sidewind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1.1, effect: \"TACK\"},\n        NearGale: {modifier: 1.25, effect: \"TACK\"},\n        StrongGale: {effect: \"BATTEN_DOWN\"},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Headwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 0.9},\n        FreshBreeze: {modifier: 0.75},\n        NearGale: {modifier: 0.5},\n        StrongGale: {effect: \"BATTEN_DOWN\"},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      }\n    },\n    Other: {\n      Tailwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1},\n        NearGale: {modifier: 1},\n        StrongGale: {modifier: 1.1},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Sidewind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1},\n        NearGale: {modifier: 1},\n        StrongGale: {modifier: 0.95},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Headwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1},\n        NearGale: {modifier: 0.9},\n        StrongGale: {modifier: 0.75},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      }\n    }\n  };\n  static WIND_EFFECT_FLYING_JIB = {\n    Sail: {\n      Tailwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1.1},\n        FreshBreeze: {modifier: 1.25},\n        NearGale: {modifier: 1.25},\n        StrongGale: {modifier: 1.5},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Sidewind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1.25, effect: \"TACK\"},\n        NearGale: {modifier: 1.25, effect: \"TACK\"},\n        StrongGale: {effect: \"BATTEN_DOWN\"},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Headwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 0.9},\n        FreshBreeze: {modifier: 0.75},\n        NearGale: {modifier: 0.5},\n        StrongGale: {effect: \"BATTEN_DOWN\"},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      }\n    },\n    Other: {\n      Tailwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1},\n        NearGale: {modifier: 1},\n        StrongGale: {modifier: 1.1},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Sidewind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1},\n        NearGale: {modifier: 1},\n        StrongGale: {modifier: 0.95},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      },\n      Headwind: {\n        Doldrums: {effect: \"BECALMED\"},\n        LightBreeze: {modifier: 1},\n        FreshBreeze: {modifier: 1},\n        NearGale: {modifier: 0.9},\n        StrongGale: {modifier: 0.75},\n        ViolentStorm: {effect: \"BATTEN_DOWN\"}\n      }\n    }\n  };\n\n  constructor(windStrength, windDirection, shipDirection) {\n    this.windStrength = windStrength;\n    this.windDirection = windDirection;\n    this.shipDirection = shipDirection;\n  }\n\n  static getRelativeName(shipDirection, windDirection) {\n    if (shipDirection === windDirection) {\n      return \"Headwind\";\n    } else if (shipDirection === windDirection.opposite()) {\n      return \"Tailwind\";\n    } else {\n      return \"Sidewind\";\n    }\n  }\n\n  static getWindDirectionEffects(options, windDirection) {\n    const WIND_EFFECT_TABLE = options.flyingJib === \"true\" ? Wind.WIND_EFFECT_FLYING_JIB : Wind.WIND_EFFECT;\n    const relativeName = Wind.getRelativeName(Direction.fromValue(options.shipDirection), windDirection);\n    return WIND_EFFECT_TABLE[options.shipPropulsion][relativeName];\n  }\n\n  async randomChange() {\n    this.changeRoll = Math.ceil(CONFIG.Dice.randomUniform() * 10);\n    if (this.changeRoll !== 1) return new Wind(this.windStrength, this.windDirection, this.shipDirection);\n\n    if (this.windStrength === WindStrength.VIOLENT_STORM) {\n      this.windStrength = this.windStrength.decrease();\n    } else if (this.windStrength === WindStrength.DOLDRUMS) {\n      this.windStrength = this.windStrength.increase();\n    }\n    if (Math.ceil(CONFIG.Dice.randomUniform() * 2) === 2) {\n      this.windStrength = this.windStrength.decrease();\n    } else {\n      this.windStrength = this.windStrength.increase();\n    }\n    return new Wind(this.windStrength, this.windDirection, this.shipDirection);\n  }\n\n  getFullName() {\n    if (this.windStrength !== WindStrength.DOLDRUMS) {\n      return `${this.windDirection.getAdj()} ${this.windStrength.getName().toLowerCase()} (${Wind.getRelativeName(this.shipDirection, this.windDirection)})`;\n    } else {\n      return `${this.windStrength.getName()}`;\n    }\n  }\n\n  getShipDistance(options) {\n    const shiftDistance = options.shipSpeed * 4.5;\n    const windEffect = Wind.getWindDirectionEffects(options, this.windDirection)[this.windStrength.value];\n    const modifier = game.robakMacros.utils.round((windEffect?.modifier ?? 1) * 100, 2);\n\n    switch (windEffect?.effect) {\n      case \"BECALMED\":\n        return {\n          normal: 0,\n          tack: 0,\n          drift: 0,\n          description: `<p><b>Distance Travelled:</b> 0 mi (0%)</p>`\n        };\n      case \"TACK\":\n        const tack = game.robakMacros.utils.round(shiftDistance * (windEffect?.modifier - 1), 2);\n        return {\n          normal: shiftDistance,\n          tack,\n          drift: 0,\n          description: `<p><b>Distance Travelled:</b> ${shiftDistance} mi (100%)</p><p><b>Distance Travelled (Tack):</b> +${tack} mi (+${modifier}%)</p>`\n        };\n      case \"BATTEN_DOWN\":\n        const drift = game.robakMacros.utils.round(\n          (Wind.getRelativeName(this.shipDirection, this.windDirection) === \"Tailwind\" ? 1 : -1) * shiftDistance * 0.25,\n          2\n        );\n        return {\n          normal: 0,\n          tack: 0,\n          drift,\n          description: `<p><b>Distance Travelled:</b> 0 mi (0%)</p><p><b>Distance Travelled (Drift):</b> ${drift} mi (25%)</p>`\n        };\n      default:\n        const normal = game.robakMacros.utils.round(shiftDistance * windEffect?.modifier, 2);\n        return {\n          normal,\n          tack: 0,\n          drift: 0,\n          description: `<p><b>Distance Travelled:</b> ${normal} mi (${modifier}%)</p>`\n        };\n    }\n  }\n\n  getRaport(options) {\n    let description = this.changeRoll ? `<p><b>Wind change roll:</b> ${this.changeRoll}</p>` : ``;\n    description += `<p><b>Wind:</b> ${this.getFullName()}</p>`;\n    if (this.windStrength === WindStrength.STRONG_GALE || this.windStrength === WindStrength.VIOLENT_STORM) {\n      description += `<p><i>${game.i18n.localize(\"SEA-WEATHER-GENERATOR.SeaSickness\")}</i></p>`;\n    }\n    const shipDistance = this.getShipDistance(options);\n    shipDistance.description = description + shipDistance.description;\n    return shipDistance;\n  }\n\n  getIcon() {\n    if (this.windStrength === WindStrength.DOLDRUMS) {\n      return this.windStrength.icon;\n    }\n    return this.windDirection.icon + this.windStrength.icon;\n  }\n\n  static async generate(options) {\n    const seasonModifier = getSeasonModifier(options.season);\n\n    const windDirection =\n      options.windDirection !== \"Random\"\n        ? Direction.fromValue(options.windDirection)\n        : await Direction.randomWindDirection(options.prevailingWind);\n    let windStrength;\n    if (options.windStrength !== \"Random\") {\n      windStrength = WindStrength.fromValue(options.windStrength);\n    } else if (options.lastWindStrength !== \"Random\") {\n      windStrength = WindStrength.fromValue(options.lastWindStrength);\n    } else {\n      windStrength = await WindStrength.random(seasonModifier);\n    }\n\n    return new Wind(windStrength, windDirection, Direction.fromValue(options.shipDirection));\n  }\n}\n\n// Weather //\nclass Precipitation {\n  static NONE = new Precipitation(0, \"None\", \"☀️\");\n  static LIGHT = new Precipitation(1, \"Light\", \"🌦️\");\n  static HEAVY = new Precipitation(2, \"Heavy\", \"🌧️\");\n  static VERY_HEAVY = new Precipitation(3, \"VeryHeavy\", \"⛈️\");\n\n  static PRECIPITATION = [\n    {\n      min: 1,\n      result: Precipitation.NONE\n    },\n    {\n      min: 7,\n      result: Precipitation.LIGHT\n    },\n    {\n      min: 10,\n      result: Precipitation.HEAVY\n    },\n    {\n      min: 11,\n      result: Precipitation.VERY_HEAVY\n    },\n    {\n      min: 13,\n      result: Precipitation.HEAVY\n    },\n    {\n      min: 14,\n      result: Precipitation.NONE\n    }\n  ];\n\n  static values = [Precipitation.NONE, Precipitation.LIGHT, Precipitation.HEAVY, Precipitation.VERY_HEAVY];\n\n  constructor(key, value, icon) {\n    this.key = key;\n    this.value = value;\n    this.icon = icon;\n  }\n\n  static fromValue(value) {\n    return Precipitation.values.find((e) => e.value === value);\n  }\n\n  static async random(seasonModifier) {\n    return await game.robakMacros.utils.rollFromCodeObject({\n      table: this.PRECIPITATION,\n      dice: \"1d10\",\n      modifier: seasonModifier\n    });\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.Precipitation.\" + this.value);\n  }\n\n  getFullNameStriped() {\n    let descriptionStripped = this.getDescription().replace(/(<([^>]+)>)/gi, \"\");\n    return `${this.getName()}\\n${descriptionStripped}`;\n  }\n\n  getDescription() {\n    return game.i18n.localize(`SEA-WEATHER-GENERATOR.Precipitation.${this.value}Desc`);\n  }\n}\n\nclass Temperature {\n  static SWELTERING = new Temperature(0, \"Sweltering\", \"☀️☀️\");\n  static HOT = new Temperature(1, \"Hot\", \"☀️\");\n  static COMFORTABLE = new Temperature(2, \"Comfortable\", \"🙂\");\n  static CHILLY = new Temperature(3, \"Chilly\", \"❄️\");\n  static BITTER = new Temperature(4, \"Bitter\", \"❄️❄️\");\n\n  static TEMPERATURE = [\n    {\n      min: 1,\n      result: Temperature.SWELTERING\n    },\n    {\n      min: 2,\n      result: Temperature.HOT\n    },\n    {\n      min: 3,\n      result: Temperature.COMFORTABLE\n    },\n    {\n      min: 9,\n      result: Temperature.CHILLY\n    },\n    {\n      min: 13,\n      result: Temperature.BITTER\n    }\n  ];\n\n  static values = [\n    Temperature.SWELTERING,\n    Temperature.HOT,\n    Temperature.COMFORTABLE,\n    Temperature.CHILLY,\n    Temperature.BITTER\n  ];\n\n  constructor(key, value, icon) {\n    this.key = key;\n    this.value = value;\n    this.icon = icon;\n  }\n\n  static fromValue(value) {\n    return Temperature.values.find((e) => e.value === value);\n  }\n\n  static async random(seasonModifier, seaTemperatureModifier) {\n    return await game.robakMacros.utils.rollFromCodeObject({\n      table: this.TEMPERATURE,\n      dice: \"1d10\",\n      modifier: seasonModifier + seaTemperatureModifier\n    });\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.Temperature.\" + this.value);\n  }\n\n  getDescription() {\n    return game.i18n.localize(`SEA-WEATHER-GENERATOR.Temperature.${this.value}Desc`);\n  }\n\n  getFullNameStriped() {\n    let descriptionStripped = this.getDescription().replace(/(<([^>]+)>)/gi, \"\");\n    return `${this.getName()}\\n${descriptionStripped}`;\n  }\n}\n\nclass Visibility {\n  static CLEAR = new Visibility(0, \"Clear\", \"☀️\");\n  static MISTY = new Visibility(1, \"Misty\", \"🌫️\");\n  static FOGGY = new Visibility(2, \"Foggy\", \"🌫️🌫️\");\n  static THICK_FOG = new Visibility(3, \"ThickFog\", \"🌫️🌫️🌫️\");\n\n  static VISIBILITY = [\n    {\n      min: 1,\n      result: Visibility.CLEAR\n    },\n    {\n      min: 5,\n      result: Visibility.MISTY\n    },\n    {\n      min: 9,\n      result: Visibility.FOGGY\n    },\n    {\n      min: 10,\n      result: Visibility.THICK_FOG\n    },\n    {\n      min: 11,\n      result: Visibility.MISTY\n    },\n    {\n      min: 14,\n      result: Visibility.CLEAR\n    }\n  ];\n\n  static values = [Visibility.CLEAR, Visibility.MISTY, Visibility.FOGGY, Visibility.THICK_FOG];\n\n  constructor(key, value, icon) {\n    this.key = key;\n    this.value = value;\n    this.icon = icon;\n  }\n\n  static fromValue(value) {\n    return Visibility.values.find((e) => e.value === value);\n  }\n\n  static async random(seasonModifier, seaTemperatureModifier) {\n    return await game.robakMacros.utils.rollFromCodeObject({\n      table: this.VISIBILITY,\n      dice: \"1d10\",\n      modifier: seasonModifier + seaTemperatureModifier\n    });\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.Visibility.\" + this.value);\n  }\n\n  getDescription() {\n    return game.i18n.localize(`SEA-WEATHER-GENERATOR.Visibility.${this.value}Desc`);\n  }\n\n  getFullNameStriped() {\n    let descriptionStripped = this.getDescription().replace(/(<([^>]+)>)/gi, \"\");\n    return `${this.getName()}\\n${descriptionStripped}`;\n  }\n}\n\nclass Weather {\n  constructor(precipitation, temperature, visibility) {\n    this.precipitation = precipitation;\n    this.temperature = temperature;\n    this.visibility = visibility;\n  }\n\n  static async generate(options) {\n    const seasonModifier = getSeasonModifier(options.season);\n    const seaTemperatureModifier = options.seaTemperature === \"Cold\" ? 0 : -2;\n\n    const precipitation =\n      options.precipitation !== \"Random\"\n        ? Precipitation.fromValue(options.precipitation)\n        : await Precipitation.random(seasonModifier);\n    const temperature =\n      options.temperature !== \"Random\"\n        ? Temperature.fromValue(options.temperature)\n        : await Temperature.random(seasonModifier, seaTemperatureModifier);\n    const visibility =\n      options.visibility !== \"Random\"\n        ? Visibility.fromValue(options.visibility)\n        : await Visibility.random(seasonModifier, seaTemperatureModifier);\n    return new Weather(precipitation, temperature, visibility);\n  }\n\n  getReport() {\n    return `\n      <h1>Sea Weather Report</h1>\n      <p><b>Precipitation:</b> ${this.precipitation.getName()}</p>\n      <p><i>${this.precipitation.getDescription()}</i></p>\n      <p><b>Temperature:</b> ${this.temperature.getName()}</p>\n      <p><i>${this.temperature.getDescription()}</i></p>\n      <p><b>Visibility:</b> ${this.visibility.getName()}</p>\n      <p><i>${this.visibility.getDescription()}</i></p>`;\n  }\n\n  async applyModifiers(ship) {\n    await ship.deleteEmbeddedDocuments(\n      \"ActiveEffect\",\n      ship.effects\n        .filter((e) => e.flags[\"wfrp4e-soc\"]?.precipitation || e.flags[\"wfrp4e-soc\"]?.visibility)\n        .map((e) => e._id)\n    );\n\n    if (this.precipitation !== Precipitation.NONE) {\n      await ship.addSystemEffect(`precipitation${this.precipitation.key}`);\n    }\n    if (this.visibility !== Visibility.CLEAR) {\n      await ship.addSystemEffect(`visibility${this.visibility.key}`);\n    }\n  }\n}\n\nconst TIMES_OF_DAY = [\"Dawn\", \"Midday\", \"Dusk\", \"Midnight\"];\nconst STYLE_MIDDLE = \"text-align:center;vertical-align:middle\";\nconst STYLE_MIDDLE_13 = `${STYLE_MIDDLE};font-size:var(--font-size-13)`;\n\nconst TableHTML = game.robakMacros.utils.TableHTML;\nconst RowHTML = game.robakMacros.utils.RowHTML;\nconst CellHTML = game.robakMacros.utils.CellHTML;\n\nfunction getSeasonModifier(season) {\n  switch (season) {\n    case \"Spring\":\n    case \"Autumn\":\n      return 2;\n    case \"Winter\":\n      return 4;\n    default:\n      return 0;\n  }\n}\n\nfunction getDistanceReport(totalDistance, options) {\n  const standardEffects = Wind.getWindDirectionEffects(options, Direction.fromValue(options.prevailingWind));\n  const standardModifiers = Object.values(standardEffects)\n    .filter((e) => !!e.modifier)\n    .map((e) => parseFloat(e.modifier));\n  const minTime = Math.ceil(options.distance / (options.shipSpeed * 18 * Math.max(...standardModifiers)));\n  const maxTime = Math.ceil(options.distance / (options.shipSpeed * 18 * Math.min(...standardModifiers)));\n  const estTime = maxTime === minTime ? maxTime : `${minTime}-${maxTime}`;\n\n  return `\n    <h1>Distance Travelled</h1>\n    <p><b>Base:</b> ${totalDistance.normal} mi</p>\n    ${totalDistance.tack === 0 ? \"\" : `<p><b>Additional Tack Distance:</b> ${totalDistance.tack} mi</p>`}\n    ${totalDistance.drift === 0 ? \"\" : `<p><b>Drift Distance:</b> ${totalDistance.drift} mi</p>`}\n    <hr>\n    <p><b>Remaining distance:</b> ${options.distance} mi</p>\n    <p><b>Estimated time to arrival:</b> ${estTime} day(s)</p>`;\n}\n\nfunction getWindsRaport(winds, options) {\n  const totalDistance = {\n    normal: 0,\n    tack: 0,\n    drift: 0\n  };\n  let windsReport = \"<h1>Wind Report</h1>\";\n  for (let i = 0; i < TIMES_OF_DAY.length; i++) {\n    const data = winds[i].getRaport(options);\n    totalDistance.normal += data.normal;\n    totalDistance.tack += data.tack;\n    totalDistance.drift += data.drift;\n    windsReport += `<h2>${TIMES_OF_DAY[i]}</h2>${data.description}`;\n  }\n  return {\n    totalDistance,\n    windsReport\n  };\n}\n\nasync function createMessage(content, visibility) {\n  await ChatMessage.create({\n    content,\n    whisper: visibility === \"ShowGM\" ? game.users.filter((u) => u.isGM).map((u) => u.id) : []\n  });\n}\n\nasync function createJournal() {\n  return await JournalEntry.create({\n    name: \"Dziennik kapitański\",\n    content: new TableHTML([\n      new RowHTML([\n        new CellHTML(\"<p><b>Day</b></p>\", {style: `${STYLE_MIDDLE_13}`, rowspan: 2}),\n        new CellHTML(\"<p><b>Precip.</b></p>\", {style: `${STYLE_MIDDLE_13}`, rowspan: 2}),\n        new CellHTML(\"<p><b>Temp.</b></p>\", {style: `${STYLE_MIDDLE_13}`, rowspan: 2}),\n        new CellHTML(\"<p><b>Visibility</b></p>\", {style: `${STYLE_MIDDLE_13}`, rowspan: 2}),\n        new CellHTML(\"<p><b>Winds</b></p>\", {style: `${STYLE_MIDDLE_13}`, colspan: 4}),\n        new CellHTML(\"<p><b>Distance</b></p>\", {style: `${STYLE_MIDDLE_13}`, rowspan: 2})\n      ]),\n      new RowHTML([\n        new CellHTML(\"<p><b>Dawn</b></p>\", {style: `${STYLE_MIDDLE_13};width: 9%`}),\n        new CellHTML(\"<p><b>Midday</b></p>\", {style: `${STYLE_MIDDLE_13};width: 9%`}),\n        new CellHTML(\"<p><b>Dusk</b></p>\", {style: `${STYLE_MIDDLE_13};width: 9%`}),\n        new CellHTML(\"<p><b>Midnight</b></p>\", {style: `${STYLE_MIDDLE_13};width: 9%`})\n      ])\n    ]).toString()\n  });\n}\n\nasync function fillJournal(options, weather, winds, totalDistance) {\n  const logbook =\n    options.logbookJournal === \"Generate\" ? await createJournal(weather) : game.journal.get(options.logbookJournal);\n  const content = logbook?.pages?.contents[0]?.text?.content;\n  if (content == null) {\n    ui.notifications.error(\"Journal not found!\");\n    return;\n  }\n\n  let distance = `${totalDistance.normal}`;\n  if (totalDistance.tack !== 0) distance += ` (+${totalDistance.tack})`;\n  if (totalDistance.drift !== 0) distance += ` (${totalDistance.drift > 0 ? \"+\" : \"\"}${totalDistance.drift})`;\n\n  const table = TableHTML.parse(content);\n  table.content.push(\n    new RowHTML([\n      new CellHTML(`<p>${options.currentDate}</p>`, {style: STYLE_MIDDLE}),\n      new CellHTML(`<p>${weather.precipitation.icon}</p>`, {\n        style: STYLE_MIDDLE,\n        title: weather.precipitation.getFullNameStriped()\n      }),\n      new CellHTML(`<p>${weather.temperature.icon}</p>`, {\n        style: STYLE_MIDDLE,\n        title: weather.temperature.getFullNameStriped()\n      }),\n      new CellHTML(`<p>${weather.visibility.icon}</p>`, {\n        style: STYLE_MIDDLE,\n        title: weather.visibility.getFullNameStriped()\n      }),\n      ...winds\n        .map((w) => {\n          return new CellHTML(`<p>${w.getIcon()}</p>`, {\n            style: STYLE_MIDDLE,\n            title: w.getFullName()\n          });\n        })\n        .join(\"\"),\n      new CellHTML(`<p>${distance}</p>`, {style: STYLE_MIDDLE})\n    ])\n  );\n\n  await logbook.pages.contents[0].update({\n    \"text.content\": table.toString()\n  });\n  options.logbookJournal = logbook.id;\n  options.currentTimestamp = SimpleCalendar.api.timestampPlusInterval(options.currentTimestamp, {day: 1});\n  options.currentDate = SimpleCalendar.api.formatTimestamp(options.currentTimestamp, \"DD MMMM YYYY\");\n}\n\nfunction calculateRemainingDistance(totalDistance, options) {\n  let distance;\n  switch (options.distanceCalculation) {\n    case \"Optimal\":\n      distance = totalDistance.normal + totalDistance.tack + Math.max(totalDistance.drift, 0);\n      break;\n    case \"Standard\":\n      distance = options.distance - totalDistance.normal;\n      break;\n    default:\n      distance = 0;\n      break;\n  }\n  return Math.max(options.distance - distance, 0);\n}\n\nasync function submit(options) {\n  const weather = await Weather.generate(options);\n  if (options.ship !== \"\") {\n    await weather.applyModifiers(game.actors.get(options.ship));\n  }\n\n  let winds = [];\n  let wind = await Wind.generate(options);\n  if (options.windStrength === \"Random\" && options.lastWindStrength === \"Random\") {\n    wind = await wind.randomChange();\n    options.lastWindStrength = wind.windStrength.value;\n  }\n  winds.push(wind);\n\n  for (let i = 0; i < TIMES_OF_DAY.length - 1; i++) {\n    wind = await wind.randomChange();\n    options.lastWindStrength = wind.windStrength.value;\n    winds.push(wind);\n  }\n\n  const {totalDistance, windsReport} = getWindsRaport(winds, options);\n\n  options.distance = calculateRemainingDistance(totalDistance, options);\n\n  if (options.weatherRaport !== \"Disabled\") await createMessage(weather.getReport(), options.weatherRaport);\n  if (options.windsRaport !== \"Disabled\") await createMessage(windsReport, options.windsRaport);\n  if (options.distanceReport !== \"Disabled\") {\n    await createMessage(getDistanceReport(totalDistance, options), options.distanceReport);\n  }\n\n  if (options.logbookJournal !== \"Disabled\") await fillJournal(options, weather, winds, totalDistance);\n}\n\nfunction getJournalWithFolders() {\n  let results = {};\n  let folders = {};\n  for (let journal of game.journal.contents.sort((a, b) => a.sort - b.sort)) {\n    folders[journal.folder?.name] = journal.folder ?? {\n      name: \"undefined\",\n      sort: Infinity\n    };\n    results[journal.folder?.name] = results[journal.folder?.name] ?? [];\n    results[journal.folder?.name].push(journal);\n  }\n  return Object.fromEntries(\n    Object.entries(results)\n      .filter(([key, _]) => !key.startsWith(\"_\"))\n      .sort(([a, _], [b, __]) => folders[a].sort - folders[b].sort)\n  );\n}\n\nfunction getJournals() {\n  let options = [];\n  for (let [folder, journals] of Object.entries(getJournalWithFolders())) {\n    let prefix = \"\";\n    if (folder !== \"undefined\") {\n      prefix = `&nbsp;&nbsp;&nbsp;&nbsp;`;\n      options.push(`<option disabled>${folder}</option>`);\n    }\n    for (let journal of journals) {\n      options.push(`<option value=\"${journal._id}\">${prefix}${journal.name}</option>`);\n    }\n  }\n  return options;\n}\n\nfunction getCurrentTimestamp() {\n  const dateTime = SimpleCalendar.api.currentDateTime();\n  return SimpleCalendar.api.dateToTimestamp({\n    year: dateTime.year,\n    month: dateTime.month,\n    day: dateTime.day\n  });\n}\n\nconst localize = (value) => game.i18n.localize(value);\n\nconst options = game.user.getFlag(\"world\", \"sea-weather-generator-options\") ?? {};\nconst DEFAULT_OPTIONS = {\n  precipitation: \"Random\",\n  temperature: \"Random\",\n  visibility: \"Random\",\n  windDirection: \"Random\",\n  windStrength: \"Random\",\n  weatherRaport: \"ShowGM\",\n  windsRaport: \"ShowGM\",\n  distanceReport: \"ShowGM\",\n  lastWindStrength: \"Random\",\n  prevailingWind: \"West\",\n  seaTemperature: \"Cold\",\n  season: \"Spring\",\n  ship: \"\",\n  shipDirection: \"West\",\n  shipPropulsion: \"Sail\",\n  shipSpeed: 8,\n  flyingJib: false,\n  logbookJournal: \"Generate\",\n  distanceCalculation: \"Optimal\",\n  currentDate: SimpleCalendar?.api?.currentDateTimeDisplay()?.date ?? \"1\",\n  currentTimestamp: getCurrentTimestamp(),\n  distance: 0\n};\nfor (let [key, value] of Object.entries(DEFAULT_OPTIONS)) {\n  if (options[key] == null) {\n    options[key] = value;\n  }\n}\n\nnew Dialog(\n  {\n    title: `${localize(\"SEA-WEATHER-GENERATOR.Label\")}`,\n    content: `\n      <form>\n        <div style=\"display: flex;justify-content: space-between;\">\n          <div style=\"flex: 1;padding: 5px;\">\n            <div class=\"form-group section-title\">\n              <label class=\"section-title\">${localize(\"MACROS-AND-MORE.Settings\")}</label>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Precipitation.Label\")}:</label>\n              <select id=\"precipitation\" name=\"precipitation\">\n                <option value=\"Random\">${localize(\"MACROS-AND-MORE.Random\")}</option>\n                ${Precipitation.values.map((e) => `<option value=\"${e.value}\">${e.getName()}</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Temperature.Label\")}:</label>\n              <select id=\"temperature\" name=\"temperature\">\n                <option value=\"Random\">${localize(\"MACROS-AND-MORE.Random\")}</option>\n                ${Temperature.values.map((e) => `<option value=\"${e.value}\">${e.getName()}</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Visibility.Label\")}:</label>\n              <select id=\"visibility\" name=\"visibility\">\n                <option value=\"Random\">${localize(\"MACROS-AND-MORE.Random\")}</option>\n                ${Visibility.values.map((e) => `<option value=\"${e.value}\">${e.getName()}</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.WindDirection\")}:</label>\n              <select style=\"width: 50%\" id=\"windDirection\" name=\"windDirection\">\n                <option value=\"Random\">${localize(\"MACROS-AND-MORE.Random\")}</option>\n                ${Direction.values.map((e) => `<option value=\"${e.value}\">${e.getAdj()} (${e.getName()} -> ${e.opposite().getName()})</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.WindStrength\")}:</label>\n              <select id=\"windStrength\" name=\"windStrength\">\n                <option value=\"Random\">${localize(\"MACROS-AND-MORE.Random\")}</option>\n                ${WindStrength.values.map((e) => `<option value=\"${e.value}\">${e.getName()}</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.WeatherRaport\")}:</label>\n              <select id=\"weatherRaport\" name=\"weatherRaport\">\n                <option value=\"ShowGM\">${localize(\"SEA-WEATHER-GENERATOR.ShowGM\")}</option>\n                <option value=\"ShowAll\">${localize(\"SEA-WEATHER-GENERATOR.ShowAll\")}</option>\n                <option value=\"Disabled\">${localize(\"MACROS-AND-MORE.Disabled\")}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.WindsRaport\")}:</label>\n              <select id=\"windsRaport\" name=\"windsRaport\">\n                <option value=\"ShowGM\">${localize(\"SEA-WEATHER-GENERATOR.ShowGM\")}</option>\n                <option value=\"ShowAll\">${localize(\"SEA-WEATHER-GENERATOR.ShowAll\")}</option>\n                <option value=\"Disabled\">${localize(\"MACROS-AND-MORE.Disabled\")}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.DistanceRaport\")}:</label>\n              <select id=\"distanceReport\" name=\"distanceReport\">\n                <option value=\"ShowGM\">${localize(\"SEA-WEATHER-GENERATOR.ShowGM\")}</option>\n                <option value=\"ShowAll\">${localize(\"SEA-WEATHER-GENERATOR.ShowAll\")}</option>\n                <option value=\"Disabled\">${localize(\"MACROS-AND-MORE.Disabled\")}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label style=\"width: 50%\">${localize(\"SEA-WEATHER-GENERATOR.Logbook\")}:</label>\n              <select style=\"width: 50%\" id=\"logbookJournal\" name=\"logbookJournal\">\n                <option value=\"Generate\">${localize(\"MACROS-AND-MORE.Create\")}</option>\n                <option value=\"Disabled\">${localize(\"MACROS-AND-MORE.Disabled\")}</option>\n                <option disabled>──────────</option>\n                ${getJournals().join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label style=\"width: 50%\">${localize(\"SEA-WEATHER-GENERATOR.DistanceCalculation\")}:</label>\n              <select style=\"width: 50%\" id=\"distanceCalculation\" name=\"distanceCalculation\">\n                <option value=\"Disabled\">${localize(\"SEA-WEATHER-GENERATOR.LogbookDisabled\")}</option>\n                <option value=\"Standard\">${localize(\"SEA-WEATHER-GENERATOR.LogbookStandard\")}</option>\n                <option value=\"Optimal\">${localize(\"SEA-WEATHER-GENERATOR.LogbookOptimal\")}</option>\n              </select>\n            </div>\n          </div>\n          <div style=\"flex: 1;padding: 5px;\">\n            <div class=\"form-group section-title\">\n              <label class=\"section-title\">${localize(\"SEA-WEATHER-GENERATOR.ExternalConditions\")}</label>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Season\")}:</label>\n              <select id=\"season\" name=\"season\">\n                <option value=\"Spring\">${localize(\"SEA-WEATHER-GENERATOR.Spring\")}</option>\n                <option value=\"Summer\">${localize(\"SEA-WEATHER-GENERATOR.Summer\")}</option>\n                <option value=\"Autumn\">${localize(\"SEA-WEATHER-GENERATOR.Autumn\")}</option>\n                <option value=\"Winter\">${localize(\"SEA-WEATHER-GENERATOR.Winter\")}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.SeaTemperature\")}:</label>\n              <select id=\"seaTemperature\" name=\"seaTemperature\">\n                <option value=\"Cold\">${localize(\"SEA-WEATHER-GENERATOR.Cold\")}</option>\n                <option value=\"Warm\">${localize(\"SEA-WEATHER-GENERATOR.Warm\")}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.PrevailingWinds\")}:</label>\n              <select style=\"width: 50%\" id=\"prevailingWind\" name=\"prevailingWind\">\n                ${Direction.values.map((e) => `<option value=\"${e.value}\">${e.getAdj()} (${e.getName()} -> ${e.opposite().getName()})</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label style=\"width: 50%\">${localize(\"SEA-WEATHER-GENERATOR.WindMidnight\")}:</label>\n              <select style=\"width: 50%\" id=\"lastWindStrength\" name=\"lastWindStrength\">\n                <option value=\"Random\">${localize(\"MACROS-AND-MORE.Random\")}</option>\n                ${WindStrength.values.map((e) => `<option value=\"${e.value}\">${e.getName()}</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group section-title\">\n              <label class=\"section-title\">${localize(\"SEA-WEATHER-GENERATOR.Ship\")}</label>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Ship\")}:</label>\n              <select id=\"ship\" name=\"ship\">\n                  <option value=\"\"></option>\n                  ${game.robakMacros.utils\n                    .getStashableActors()\n                    .filter((a) => a.type === \"vehicle\")\n                    .map((a) => `<option value=\"${a.id}\">${a.name}</option>`)\n                    .join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.FlyingJib\")}:</label>\n              <select id=\"flyingJib\" name=\"flyingJib\">\n                <option value=\"true\">${localize(\"SEA-WEATHER-GENERATOR.True\")}</option>\n                <option value=\"false\">${localize(\"SEA-WEATHER-GENERATOR.False\")}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Propulsion\")}:</label>\n              <select id=\"shipPropulsion\" name=\"shipPropulsion\">\n                <option value=\"Sail\">${localize(\"SEA-WEATHER-GENERATOR.Sail\")}</option>\n                <option value=\"Other\">${localize(\"SEA-WEATHER-GENERATOR.Other\")}</option>\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Speed\")}:</label>\n              <input name=\"shipSpeed\" value=\"${options.shipSpeed}\" type=\"number\" min=\"0\">\n            </div>\n            <div class=\"form-group section-title\">\n              <label class=\"section-title\">${localize(\"SEA-WEATHER-GENERATOR.Journey\")}</label>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.Direction\")}:</label>\n              <select id=\"shipDirection\" name=\"shipDirection\">\n                  ${Direction.values.map((e) => `<option value=\"${e.value}\">${e.getName()}</option>`).join(\"\")}\n              </select>\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.DistanceToTarget\")}:</label>\n              <input name=\"distance\" type=\"number\" value=\"${options.distance}\" min=\"0\">\n            </div>\n            <div class=\"form-group\">\n              <label>${localize(\"SEA-WEATHER-GENERATOR.CurrentDay\")}:</label>\n              <input id=\"visibleDate\" name=\"visibleDate\" type=\"text\" value=\"${options.currentDate}\" readonly>\n              <input id=\"currentDate\" name=\"currentDate\" type=\"hidden\" value=\"${options.currentDate}\" />\n              <input id=\"currentTimestamp\" name=\"currentTimestamp\" type=\"hidden\" value=\"${options.currentTimestamp}\" />\n            </div>\n            <div class=\"form-group\">\n              <button name=\"updateDate\" type=\"button\">${localize(\"SEA-WEATHER-GENERATOR.SyncWithCalendar\")}</button>\n            </div>\n          </div>\n        </div>\n      </form>\n      <script>\n        function setSelectValue(selectId, value) {\n          const selectElement = document.getElementById(selectId);\n          if (selectElement == null) return;\n          selectElement.value = value;\n          selectElement.dispatchEvent(new Event('change'));\n        }\n        $(\"button[name='updateDate']\").on(\"click\", function() {\n          const dateTime = SimpleCalendar.api.currentDateTime();\n          const date = SimpleCalendar?.api?.currentDateTimeDisplay()?.date\n          document.getElementById(\"visibleDate\").value = date;\n          document.getElementById(\"currentDate\").value = date;\n          document.getElementById(\"currentTimestamp\").value = SimpleCalendar.api.dateToTimestamp({year: dateTime.year, month: dateTime.month, day: dateTime.day});\n        })\n        ${Object.entries(options)\n          .map(([key, value]) => `setSelectValue(\"${key}\", \"${value}\")`)\n          .join(\";\")}\n      </script>`,\n    buttons: {\n      no: {\n        icon: `<i class='fas fa-undo'></i>`,\n        label: localize(\"SEA-WEATHER-GENERATOR.DefaultSettings\"),\n        callback: async () => {\n          await game.user.setFlag(\"world\", \"sea-weather-generator-options\", DEFAULT_OPTIONS);\n        }\n      },\n      save: {\n        icon: `<i class='fas fa-save'></i>`,\n        label: localize(\"SEA-WEATHER-GENERATOR.SaveSettings\"),\n        callback: async (html) => {\n          const options = new FormDataExtended(html[0].querySelector(\"form\")).object;\n          await game.user.setFlag(\"world\", \"sea-weather-generator-options\", options);\n        }\n      },\n      yes: {\n        icon: `<i class='fas fa-check'></i>`,\n        label: localize(\"Submit\"),\n        callback: async (html) => {\n          const options = new FormDataExtended(html[0].querySelector(\"form\")).object;\n          await submit(options);\n          await game.user.setFlag(\"world\", \"sea-weather-generator-options\", options);\n        }\n      }\n    },\n    default: \"yes\"\n  },\n  {width: 750}\n).render(true);\n",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "2.0.2",
      "sourceId": "pbZ7tQT51RcpTedj"
    }
  },
  "folder": null,
  "img": "modules/wfrp4e-macros-and-more/assets/icons/sea-weather-generator.svg",
  "name": "Sea Weather Generator",
  "scope": "global",
  "type": "script",
  "_key": "!macros!pbZ7tQT51RcpTedj"
}
