{
  "name": "Token Manager",
  "type": "script",
  "scope": "global",
  "author": "MJAZjdKh3QKREKG2",
  "img": "icons/svg/dice-target.svg",
  "command": "/* ==========\n* MACRO: Token manipulator\n* VERSION: 1.0.0\n* AUTHOR: Robak132\n* DESCRIPTION: Allows for quick token manipulations (disposition changes, system effects, showing weapons etc.)\n========== */\n\nasync function setTokenDisposition(token, disposition) {\n  await token.document.update({ disposition: disposition });\n  token.refresh(true);\n}\n\nfunction addSystemEffect(token, effect) {\n  let actor = token.actor;\n  actor.addSystemEffect(effect)\n}\n\nconst OPERATIONS = [\n  {\n    id: 'show-weapons',\n    name: 'Show Weapons'\n  }, {\n    id: 'hide-weapons',\n    name: 'Hide Weapons'\n  }, {\n    id: 'toggle-weapons',\n    name: 'Toggle Weapons'\n  }, {\n    disabled: true\n  }, {\n    id: 'set-friendly',\n    function: (token) => setTokenDisposition(token, 1),\n    name: 'Set Token Friendly'\n  }, {\n    id: 'set-neutral',\n    function: (token) => setTokenDisposition(token, 0),\n    name: 'Set Token Neutral'\n  }, {\n    id: 'set-hostile',\n    function: (token) => setTokenDisposition(token, -1),\n    name: 'Set Token Hostile'\n  }, {\n    disabled: true\n  }, {\n    id: 'set-infighting',\n    function: (token) => addSystemEffect(token, \"infighting\"),\n    name: 'Set Infighting'\n  }\n];\n\nmain();\n\nfunction main() {\n  if (canvas.tokens.controlled.length) {\n    new Dialog({\n      title: 'Select operation',\n      content: `\n     <form>\n      <div class=\"form-group\">\n        <select style=\"text-align: center\" name=\"operation\">\n        ${OPERATIONS.map(op => {\n        return op.disabled === true ? `<option disabled>──────────</option>` : `<option value=\"${op.id}\">${op.name}</option>`;\n      }).join()}\n        </select>\n      </div>\n    </form>`,\n      buttons: {\n        no: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: 'Cancel'\n        },\n        yes: {\n          icon: '<i class=\"fas fa-check\"></i>',\n          label: 'Confirm',\n          callback: async (html) => {\n            const operationId = html.find('[name=\"operation\"]').val();\n            const operation = OPERATIONS.find(op => op.id === operationId)\n            canvas.tokens.controlled.forEach(token => operation.function(token))\n          }\n        }\n      },\n      default: 'yes'\n    }).render(true);\n  } else {\n    return ui.notifications.error('Select one or more tokens on which you want to run this macro');\n  }\n}",
  "folder": null,
  "ownership": {
    "default": 0,
    "MJAZjdKh3QKREKG2": 3
  },
  "flags": {
    "advanced-macros": {
      "runForSpecificUser": ""
    },
    "core": {}
  },
  "_stats": {
    "systemId": "wfrp4e",
    "systemVersion": "7.0.3",
    "coreVersion": "11.315",
    "createdTime": 1712132005834,
    "modifiedTime": 1712340003889,
    "lastModifiedBy": "MJAZjdKh3QKREKG2"
  },
  "_id": "luVmQCZiZSUTxBPa",
  "sort": 100000,
  "_key": "!macros!luVmQCZiZSUTxBPa"
}
