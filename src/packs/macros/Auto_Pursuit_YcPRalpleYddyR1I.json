{
  "_id": "YcPRalpleYddyR1I",
  "author": "MJAZjdKh3QKREKG2",
  "command": "/* ==========\n* MACRO: Auto-Pursuit\n* VERSION: 1.0\n* AUTHOR: Robak132\n* DESCRIPTION: Allows for creating pursuits (Core & UiA rules)\n========== */\n\n// Preset Obstacles\nconst PRESET_OBSTACLES = {\n  large_log: {\n    name: `Large Log`,\n    perceived: `Automatically`,\n    navigatePerceived: `Average (+20) Athletics Test`,\n    consequences: `Gain Prone.`,\n    stopping: true,\n  },\n  haystack: {\n    name: `Haystack`,\n    perceived: `Automatically`,\n    navigatePerceived: `Hard (-20) Climb Test`,\n    consequences: `Gain Entangled (S 2D10+20).`,\n    stopping: true,\n  },\n  puddle: {\n    name: `Filthy Puddle`,\n    perceived: `Average (+20) Perception Test`,\n    navigatePerceived: `Average (+20) Athletics Test`,\n    navigateNotPerceived: `Hard (-20) Athletics Test`,\n    consequences: `-2 SL to all Fellowship Tests until you clean yourself.`,\n  },\n  crates: {\n    name: `Crates of Merchandise`,\n    perceived: `Automatically`,\n    navigatePerceived: `Challenging (+0) Athletics Test`,\n    consequences: `Gain Prone, 2D10 pieces of merchandise are broken.`,\n    stopping: true,\n  },\n  gate: {\n    name: `Closed Gate`,\n    perceived: `Automatically`,\n    navigatePerceived: `Hard (-20) Climb Test`,\n    consequences: `Cannot move; fall 2 yds on Impressive Failure (-6 SL).`,\n    stopping: true,\n  },\n  pothole: {\n    name: `Pothole`,\n    perceived: `Challenging (+0) Perception Test`,\n    navigatePerceived: `Easy (+40) Athletics Test`,\n    navigateNotPerceived: `Hard (-20) Athletics Test`,\n    consequences: `Gain Twisted Ankle Critical Injury.`,\n  },\n  quicksand: {\n    name: 'Quicksand',\n    perceived: `Challenging (+0) Perception Test`,\n    navigatePerceived: `Easy (+40) Athletics Test`,\n    navigateNotPerceived: `Hard (-20) Athletics Test`,\n    consequences: `Gain Entangled (S 2D10+20), each Round S increase by D10, after 6 Rounds pass Challenging (+0) Cool Test or start Drowning.`,\n    stopping: true,\n  },\n  goat_herd: {\n    name: 'Passing Goat Herd',\n    perceived: `Automatically`,\n    navigatePerceived: `Hard (-20) Athletics Test`,\n    consequences: `Weapon (Horns) +6 hit.`,\n  },\n  fish_guts_bucket: {\n    name: 'Bucket full of Fish Guts',\n    perceived: `Automatically`,\n    navigatePerceived: `Easy (+40) Athletics Test`,\n    consequences: `Gain Prone.`,\n    stopping: true,\n  },\n  fish_guts_slick: {\n    name: 'Slick of Fish Guts',\n    perceived: `Automatically`,\n    navigatePerceived: `Hard (-20) Athletics Test`,\n    consequences: `Gain Prone, -2 SL to all Fellowship Tests until they clean themselves, test for Festering Wounds if they have untreated wounds.`,\n    stopping: true,\n  },\n  rotten_Floorboards: {\n    name: 'Rotten Floorboards',\n    perceived: `Hard (-20) Perception Test`,\n    navigatePerceived: `Average (+20) Athletics Test`,\n    navigateNotPerceived: `Very Hard (-30) Athletics Test`,\n    consequences: `Fall from 3 yds.`,\n  },\n  workman: {\n    name: 'Workman on Ladder',\n    perceived: `Automatically`,\n    navigatePerceived: `Easy (+40) Athletics Test`,\n    consequences: `Gain Prone Condition, workman must pass Hard (-20) Athletics Test or fall D10 yds.`,\n    stopping: true,\n  },\n  cart: {\n    name: 'Unattended Cart',\n    perceived: `Automatically`,\n    navigatePerceived: `Average (+20) Climb Test`,\n    consequences: `Lose Round`,\n    stopping: true,\n  },\n  cart_cabbage: {\n    name: 'Unattended Cart Full of Cabbages',\n    perceived: `Automatically`,\n    navigatePerceived: `Challenging (+0) Climb Test`,\n    consequences: `Average (+20) Initiative Test or gain Surprised. Replace with Unattended Cart and Scattered Mound of Cabbages obstacles.`,\n    stopping: true,\n  },\n  mound_cabbage: {\n    name: 'Scattered Mound of Cabbages',\n    perceived: `Automatically`,\n    navigatePerceived: `Hard (-20) Athletics Test`,\n    consequences: `Suffer fall from 1 yd and gain Prone.`,\n    stopping: true,\n  },\n};\n\nclass SimplePursuit {\n  MAIN_STYLE = 'text-align: center;font-family: CaslonPro;font-weight: 600;font-variant: small-caps';\n  DIALOG_WIDTH = 500;\n  POST_TO_CHAT = true;\n\n  constructor() {\n    this.objectsInPursuit = this.initObjectList();\n    this.maxDistance = 10;\n    this.turn = 0;\n    this.initialDialogHeader = ``;\n    this.initialDialogFooter = `\n      <h2 style=\"${this.MAIN_STYLE}\"><b>Escaping from combat</b></h2>\n      <h4><b>Advantage: </b>1 Distance per spent Advantage.</h4>\n      <h4><b>Dodge: </b>1 Distance.</h4>\n      <h4><b>Fleeing: </b>3 Distance, if opponent attacks, 1 Distance if not.</h4>`;\n    this.nextTurnFooter = `\n      <h2 style=\"${this.MAIN_STYLE}\"><b>Distance Update Rules</b></h2>\n      <h4 style=\"text-align: center\">Distance Moved = SL</h4>`;\n  }\n\n  initObjectList() {\n    let objectsInPursuitSet = new Set();\n    if (canvas.tokens.controlled.length) {\n      canvas.tokens.controlled.forEach(t => {\n        objectsInPursuitSet.add(this.getPursuitObjectFromActor(t.actor));\n      });\n    } else {\n      game.actors.filter(a => a.hasPlayerOwner && a.type !== \"vehicle\").forEach(a => {\n        objectsInPursuitSet.add(this.getPursuitObjectFromActor(a));\n      });\n    }\n    return [...objectsInPursuitSet];\n  }\n\n  sortObjects(objects) {\n    return objects.sort((a, b) => a.name.localeCompare(b.name, 'pl')).\n        sort((a, b) => a.move < b.move ? -1 : 1).\n        sort((a, b) => Number(a.quarry) - Number(b.quarry)).\n        sort((a, b) => Number(a.type === 'obstacle') - Number(b.type === 'obstacle')).\n        sort((a, b) => a.distance < b.distance ? -1 : 1);\n  }\n\n  //-------------//\n\n  getPursuitObjectFromActor(actor) {\n    return {\n      actor: actor,\n      active: true,\n      name: actor.name,\n      move: actor.system.details.move.value,\n      run: actor.system.details.move.run,\n      type: 'character',\n      distance: 0,\n      testSL: this.getDefaultTestSL(),\n      quarry: false,\n    };\n  }\n\n  getCharacterMoveFormatted(character) {\n    return `${character.move}`;\n  }\n\n  getDefaultTestSL() {\n    return 0;\n  }\n\n  getDistanceMoved(character) {\n    if (character.testSL !== undefined) {\n      return character.testSL;\n    } else {\n      return 0;\n    }\n  }\n\n  getObstacleNavigateTest(object) {\n    if (object.navigateNotPerceived != null) {\n      return object.navigatePerceived + '/' + object.navigateNotPerceived;\n    } else {\n      return object.navigatePerceived;\n    }\n  }\n\n  //-------------//\n\n  getChatTable() {\n    let content = `\n      <table>\n        <tr>\n          <td style=\"text-align:center\"><b>Q</b></td>\n          <td style=\"text-align:center\"><b>Name</b></td>\n          <td style=\"text-align:center\"><b>Move</b></td>\n          <td style=\"text-align:center\"><b>Distance</b></td>\n        </tr>`;\n    this.getActive().forEach(object => {\n      if (object.type === 'character') {\n        content += `\n          <td style=\"text-align:center\">${object.quarry ? '<i class=\\'fas fa-check\\' />' : ''}</td>\n          <td style=\"text-align:center\">${object.name}</td>\n          <td style='text-align:center'>${object.move}</td>\n          <td style=\"text-align:center\">${object.distance}</td>\n        </tr>`;\n      } else {\n        content += `\n          <td style=\"text-align:center\" colspan=3\"><i><b>${object.perceived === 'Automatically'\n            ? object.name\n            : 'Unknown Obstacle'}</b></i></td>\n          <td style=\"text-align:center\">${object.distance}</td>\n        </tr>`;\n      }\n    });\n    content += `</table>`;\n    return content;\n  }\n\n  getChatLostCharacters() {\n    const quarry = this.getQuarry();\n    const pursuers = this.getPursuers();\n\n    let messages = '';\n    let characterDistance = [];\n    let debugCharacterDistance = [];\n    for (let i = 0; i < quarry.length; i++) {\n      let row = [];\n      let debugRow = [];\n      let lastDistance = quarry[i].distance;\n      let isLost = false;\n\n      for (let j = pursuers.length - 1; j >= 0; j--) {\n        debugRow.push(lastDistance - pursuers[j].distance);\n        if (lastDistance - pursuers[j].distance < 0) {\n          row.push(-1);\n        } else if (isLost || lastDistance - pursuers[j].distance >= this.maxDistance) {\n          row.push(0);\n          isLost = true;\n          lastDistance = pursuers[j].distance;\n        } else {\n          row.push(1);\n          lastDistance = pursuers[j].distance;\n        }\n      }\n      characterDistance.push(row.reverse());\n      debugCharacterDistance.push(debugRow.reverse());\n    }\n\n    // Escapes\n    for (let i = 0; i < quarry.length; i++) {\n      for (let j = 0; j < pursuers.length; j++) {\n        if (characterDistance[i][j] === 1) {\n          break;\n        } else if (characterDistance[i][j] === -1) {\n          quarry[i].distance = 0;\n          quarry[i].active = false;\n          messages += `<h4><b>${quarry[i].name}</b> escapes.</h4>`;\n          break;\n        }\n      }\n    }\n\n    // Lost track\n    for (let i = 0; i < pursuers.length; i++) {\n      let isLost = true;\n      for (let j = 0; j < quarry.length; j++) {\n        if (characterDistance[j][i] !== 0) {\n          isLost = false;\n          break;\n        }\n      }\n      if (isLost) {\n        pursuers[i].distance = 0;\n        pursuers[i].active = false;\n        messages += `<h4><b>${pursuers[i].name}</b> lost sight with rest of Pursuit.</h4>`;\n      }\n    }\n\n    return messages;\n  }\n\n  getChatPursuitTests() {\n    const characters = this.getCharacters();\n    const slowestCharacter = characters.reduce((a, b) => a.move < b.move ? a : b).move;\n    let pursuitTests = '';\n    characters.forEach(character => {\n      pursuitTests += `<h4><b>${character.name}</b> rolls with +${character.move - slowestCharacter} SL.</h4>`;\n    });\n    return pursuitTests;\n  }\n\n  //-------------//\n\n  getActive() {\n    return this.objectsInPursuit.filter(o => o.active);\n  }\n\n  getInactive() {\n    return this.objectsInPursuit.filter(o => !o.active);\n  }\n\n  getCharacters() {\n    return this.objectsInPursuit.filter(o => o.type === 'character' && o.active);\n  }\n\n  getObstacles() {\n    return this.objectsInPursuit.filter(o => o.type === 'obstacle' && o.active);\n  }\n\n  getQuarry() {\n    return this.getCharacters().filter(o => o.quarry);\n  }\n\n  getPursuers() {\n    return this.getCharacters().filter(o => !o.quarry);\n  }\n\n  //-------------//\n\n  renderCreatePursuitDialog() {\n    let content = `<form>\n      ${this.initialDialogHeader}\n      <h2 style=\"${this.MAIN_STYLE}\">\n        <b>Choose Quarry and Initial Distance</b>\n      </h2>\n      <div class=\"form-group\">\n        <span style=\"flex: 2;${this.MAIN_STYLE}\">In Pursuit</span>\n        <span style=\"flex: 4;${this.MAIN_STYLE}\">Name</span>\n        <span style=\"flex: 1;${this.MAIN_STYLE}\">Initial Distance</span>\n        <span style=\"flex: 1;${this.MAIN_STYLE}\">Quarry</span>\n      </div>`;\n    this.getCharacters().forEach(character => {\n      content += `\n        <div class=\"form-group\">\n          <div style=\"flex: 2;${this.MAIN_STYLE}\">\n            <input name=\"active\" style=\"text-align: center\" type=\"checkbox\" ${character.active ? 'checked' : ''}>\n          </div>\n          <span style=\"flex: 4;${this.MAIN_STYLE}\">\n            ${!!character.actor ? '<i class=\\'fas fa-user\\'></i> ' : ''}${character.name}\n          </span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">\n            <input name=\"distance\" type=\"number\" value=\"${character.distance}\" min=\"0\" step=\"1\">\n          </span>\n          <div style=\"flex: 1;${this.MAIN_STYLE}\">\n            <input name=\"quarry\" style=\"text-align: center\" type=\"checkbox\" ${character.quarry ? 'checked' : ''}>\n          </div>\n        </div>`;\n    });\n    content += `\n      ${this.initialDialogFooter}\n    </form>`;\n\n    new Dialog({\n      title: 'Pursuit',\n      content: content,\n      buttons: {\n        yes: {\n          icon: '<i class=\\'fas fa-check\\'></i>',\n          label: 'Start',\n          callback: async (html) => {\n            this.processCreatePursuitDialog(html);\n            if (this.getQuarry().length) {\n              await this.nextTurn();\n            }\n          },\n        },\n        addActor: {\n          icon: '<i class=\\'fas fa-user\\'></i>',\n          label: 'Add Actor',\n          callback: (html) => {\n            this.processCreatePursuitDialog(html);\n            this.renderAddActorDialog(this.renderCreatePursuitDialog);\n          },\n        },\n        cancel: {\n          icon: '<i class=\\'fas fa-times\\'></i>',\n          label: 'Cancel',\n        },\n      },\n      default: 'yes',\n    }, {width: this.DIALOG_WIDTH}).render(true);\n  }\n\n  processCreatePursuitDialog(html) {\n    const characters = this.getCharacters();\n    const form = new FormDataExtended(html[0].querySelector('form')).object;\n    for (let i = 0; i < characters.length; i++) {\n      characters[i].active = form.active[i];\n      characters[i].distance = form.quarry[i] ? Math.max(form.distance[i], 1) : form.distance[i];\n      characters[i].quarry = form.quarry[i];\n    }\n    this.objectsInPursuit = this.objectsInPursuit.filter(o => o.active);\n  }\n\n  renderNextTurnDialog() {\n    let content = `\n      <form>\n        <div class=\"form-group\">\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">In Pursuit?</span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">Quarry</span>\n          <span style=\"flex: 3;${this.MAIN_STYLE}\">Name</span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">Move</span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">Test SLs</span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">Distance</span>\n        </div>`;\n    this.getActive().forEach((character) => {\n      content += this.getNextTurnRow(character);\n    });\n    const inactiveObjects = this.getInactive();\n    if (inactiveObjects.length) {\n      content += `<p style=\"text-align: center;font-variant: small-caps;font-weight: bold;\">Inactive</p>`;\n      inactiveObjects.forEach((character) => {\n        content += this.getNextTurnRow(character);\n      });\n    }\n    content += `</form>${this.nextTurnFooter}`;\n\n    new Dialog({\n      title: `Pursuit: Turn ${this.turn}`,\n      content: content,\n      buttons: {\n        nextTurn: {\n          icon: '<i class=\\'fas fa-check\\'></i>',\n          label: 'Next Turn',\n          callback: async (html) => {\n            this.processNextTurnDialog(html);\n            await this.nextTurn();\n          },\n        },\n        addActor: {\n          icon: '<i class=\\'fas fa-user\\'></i>',\n          label: 'Add Actor',\n          callback: async (html) => {\n            this.processNextTurnDialog(html);\n            this.renderAddActorDialog(this.renderNextTurnDialog);\n          },\n        },\n        addObstacle: {\n          icon: '<i class=\\'fas fa-mountains\\'></i>',\n          label: 'Add Obstacle',\n          callback: (html) => {\n            this.processNextTurnDialog(html);\n            this.renderAddObstacle(this.renderNextTurnDialog);\n          },\n        },\n        cancel: {\n          icon: '<i class=\\'fas fa-times\\'></i>',\n          label: 'Cancel',\n        },\n      },\n      default: 'nextTurn',\n    }, {width: this.DIALOG_WIDTH + 150}).render(true);\n  }\n\n  getNextTurnRow(object) {\n    if (object.type === 'character') {\n      return `\n        <div class=\"form-group\"\">\n          <div style=\"flex: 1;${this.MAIN_STYLE}\">\n            <input tabindex=\"-1\" name=\"active\" type=\"checkbox\" ${object.active ? 'checked' : ''}>\n          </div>\n          <div style=\"flex: 1;${this.MAIN_STYLE}\">\n            ${object.quarry ? '<i class=\\'fa-solid fa-check\\'></i>' : ''}\n          </div>\n          <span style=\"flex: 3;${this.MAIN_STYLE}\">\n            ${!!object.actor ? '<i class=\\'fas fa-user\\'></i> ' : ''}${object.name}\n          </span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">\n            ${this.getCharacterMoveFormatted(object)}\n          </span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">\n            <input name=\"SL\" type=\"number\" value=\"${object.testSL}\" step=\"1\">\n          </span>\n          <span style=\"flex: 1;${this.MAIN_STYLE}\">\n            <input tabindex=\"-1\" name=\"distance\" type=\"number\" value=\"${object.distance}\" min=\"0\" step=\"1\">\n          </span>\n        </div>`;\n    } else {\n      return `\n      <div class=\"form-group\"\">\n        <div style=\"flex: 1;${this.MAIN_STYLE}\">\n          <input tabindex=\"-1\" name=\"active\" type=\"checkbox\" ${object.active ? 'checked' : ''}>\n        </div>\n        <p style=\"flex: 6;${this.MAIN_STYLE}\" \n        title=\"Perceived: ${object.perceived}&#10;Test: ${this.getObstacleNavigateTest(\n          object)}&#10;Consequences: ${object.consequences}\">\n          <i class='fas fa-road-barrier'></i> ${object.name}\n        </p>\n        <input name=\"SL\" type=\"hidden\" value=\"${object.testSL}\" step=\"1\">\n        <span style=\"flex: 1;${this.MAIN_STYLE}\">\n          <input tabindex=\"-1\" name=\"distance\" type=\"number\" value=\"${object.distance}\" min=\"0\" step=\"1\">\n        </span>\n      </div>`;\n    }\n  }\n\n  processNextTurnDialog(html) {\n    const form = new FormDataExtended(html[0].querySelector('form')).object;\n    const active = this.getActive();\n    for (let i = 0; i < active.length; i++) {\n      let object = active[i];\n      object.active = form.active[i];\n      object.distance = Number(form.distance[i]);\n      object.testSL = Number(form.SL[i]);\n    }\n\n    // Limit distance if pursuer run past query\n    let maxQueryDistance = this.getQuarry().reduce((a, b) => a.distance > b.distance ? a : b).distance;\n    for (let pursuer of this.getPursuers()) {\n      pursuer.distance = pursuer.distance > maxQueryDistance ? maxQueryDistance : pursuer.distance;\n    }\n  }\n\n  renderAddActorDialog(backFunc) {\n    let content = `\n      <form>\n        <h2 style=\"${this.MAIN_STYLE}\">\n          <b>Insert Values or Select Actor's Token</b>\n        </h2>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">Name</span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">\n            <input name=\"name\" type=\"text\">\n          </span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">Move</span>\n          <span style=\"${this.MAIN_STYLE}\">Run</span>\n          <span style=\"${this.MAIN_STYLE}\">Flee!</span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">\n            <input name=\"move\" type=\"number\" min=\"0\" step=\"1\">\n          </span>\n          <span style=\"${this.MAIN_STYLE}\">\n            <input name=\"run\" type=\"number\" min=\"0\" step=\"1\">\n          </span>\n          <div style=\"${this.MAIN_STYLE}\">\n            <input name=\"flee\" type=\"checkbox\">\n          </div>\n        </div>\n      </form>`;\n\n    new Dialog({\n      title: 'Add Actor',\n      content: content,\n      buttons: {\n        add: {\n          icon: '<i class=\\'fas fa-check\\'></i>',\n          label: 'Add',\n          callback: (html) => {\n            this.processAddActorDialog(html);\n            this.objectsInPursuit = this.sortObjects(this.objectsInPursuit);\n            backFunc.call(this);\n          },\n        },\n        cancel: {\n          icon: '<i class=\\'fas fa-times\\'></i>',\n          label: 'Cancel',\n          callback: () => backFunc.call(this),\n        },\n      },\n      default: 'add',\n    }, {width: this.DIALOG_WIDTH}).render(true);\n  }\n\n  processAddActorDialog(html) {\n    const form = new FormDataExtended(html[0].querySelector('form')).object;\n    if (form.name !== '' && form.move !== null && form.run !== null) {\n      this.objectsInPursuit.push({\n        active: true,\n        name: form.name,\n        move: form.move,\n        run: form.run,\n        type: 'character',\n        testSL: 0,\n        distance: 0,\n        quarry: false,\n      });\n    } else if (canvas.tokens.controlled.length > 0) {\n      canvas.tokens.controlled.forEach(t => this.objectsInPursuit.push(this.getPursuitObjectFromActor(t.actor)));\n    } else {\n      return ui.notifications.error('Insert correct values or select Actor\\'s Token');\n    }\n  }\n\n  renderAddObstacle(backFunc) {\n    let content = `\n      <form>\n        <h2 style=\"${this.MAIN_STYLE}\">\n          <b>Create Obstacle</b>\n        </h2>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">Name</span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">\n            <input name=\"name\" type=\"text\">\n          </span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">Perceived Test</span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">\n            <input name=\"name\" type=\"text\">\n          </span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">Test to Navigate</span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">\n            <input name=\"name\" type=\"text\">\n          </span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">Consequences</span>\n        </div>\n        <div class=\"form-group\">\n          <span style=\"${this.MAIN_STYLE}\">\n            <input name=\"name\" type=\"text\">\n          </span>\n        </div>\n        <h2 style=\"${this.MAIN_STYLE}\">\n          <b>Select Obstacle From Presets</b>\n        </h2>\n        <div class=\"form-group\">\n          <select style=\"text-align: center\" id=\"preset\" name=\"preset\">\n            <option value=\"\" selected></option>`;\n    for (const [key, value] of Object.entries(PRESET_OBSTACLES)) {\n      content += `\n        <option value=\"${key}\" title=\"Perceived: ${value.perceived}&#10;Test: ${this.getObstacleNavigateTest(\n          value)}&#10;Consequences: ${value.consequences}\">\n          ${value.name}\n        </option>`;\n    }\n    content += `\n        </select>\n      </div>\n    </form>`;\n    new Dialog({\n      title: 'New Obstacle',\n      content: content,\n      buttons: {\n        yes: {\n          icon: '<i class=\\'fas fa-check\\'></i>',\n          label: 'Add',\n          callback: (html) => {\n            this.processAddObstacleDialog(html);\n            this.objectsInPursuit = this.sortObjects(this.objectsInPursuit);\n            backFunc.call(this);\n          },\n        },\n        cancel: {\n          icon: '<i class=\\'fas fa-times\\'></i>',\n          label: 'Cancel',\n          callback: () => backFunc.call(this),\n        },\n      },\n      default: 'yes',\n    }, {width: this.DIALOG_WIDTH}).render(true);\n  }\n\n  processAddObstacleDialog(html) {\n    const form = new FormDataExtended(html[0].querySelector('form')).object;\n    if (form.preset) {\n      const obstacle = PRESET_OBSTACLES[form.preset];\n      this.objectsInPursuit.push({\n        ...obstacle,\n        active: true,\n        move: 0,\n        run: 0,\n        type: 'obstacle',\n        testSL: 0,\n        distance: this.getQuarry().reduce((a, b) => a.distance > b.distance ? a : b).distance,\n        quarry: false,\n      });\n    }\n  }\n\n  //-------------//\n\n  async nextTurn() {\n    this.turn += 1;\n\n    await this.calculateDistanceMoved();\n    this.objectsInPursuit = this.sortObjects(this.objectsInPursuit);\n\n    const lostCharactersMsg = this.getChatLostCharacters();\n    this.normaliseDistance();\n\n    // Create chat message\n    let content = `<h1 style=\"text-align: center\">Pursuit: Turn ${this.turn}</h1>`;\n    content += this.getChatTable();\n    content += lostCharactersMsg;\n\n    // Check end\n    if (this.getQuarry().length !== 0 && this.getPursuers().length !== 0) {\n      content += '<h2 style=\\'text-align: center\\'>Pursuit Tests</h2>';\n      content += this.getChatPursuitTests();\n      this.renderNextTurnDialog();\n    }\n    if (this.POST_TO_CHAT) ChatMessage.create({content: content}, false);\n  }\n\n  async calculateDistanceMoved() {\n    let characters = this.getCharacters();\n    for (let character of characters) {\n      character.distanceMoved = this.getDistanceMoved(character);\n      character.distance += character.distanceMoved;\n      character.testSL = this.getDefaultTestSL();\n    }\n\n    // Catching Quarry\n    let maxQuarryDistance = this.getQuarry().reduce((a, b) => a.distance > b.distance ? a : b).distance;\n    for (let pursuer of this.getPursuers()) {\n      for (let quarry of this.getQuarry()) {\n        if (pursuer.distance > quarry.distance && (pursuer.distance - pursuer.distanceMoved) <=\n            (quarry.distance - quarry.distanceMoved)) {\n          if (maxQuarryDistance === quarry.distance || await PursuitDialogHelper.createPursuitDialogFormatted({\n            title: `${pursuer.name} can caught ${quarry.name}`,\n            content: `Do you want to charge into combat, or run past and pursue another quarry?`,\n            buttons: {\n              yes: {\n                label: 'Charge into Combat',\n                callback: () => true,\n              },\n              no: {\n                label: 'Continue Pursuit',\n                callback: () => false,\n              },\n            },\n            defaultButton: 'yes',\n          })) {\n            pursuer.distance = quarry.distance;\n          }\n        }\n      }\n    }\n\n    // Encountering Obstacles\n    for (let obstacle of this.getObstacles().reverse()) {\n      for (let character of this.getCharacters().reverse()) {\n        if (character.distance > obstacle.distance && character.distance - character.distanceMoved <=\n            obstacle.distance) {\n          const content = obstacle.perceived === 'Automatically' ? `\n            <h3 style=\"${this.MAIN_STYLE}\">Navigate Test</h3>\n            <div class=\"delete-item-dialog selection\">\n              <label>${obstacle.navigatePerceived}</label>\n            </div>\n            <h3 style=\"${this.MAIN_STYLE}\">Consequences</h3>\n            <div class=\"delete-item-dialog selection\">\n              <label>${obstacle.consequences}</label>\n            </div>\n          ` : `\n            <h3 style=\"${this.MAIN_STYLE}\">Perceive Test</h3>\n            <div class=\"delete-item-dialog selection\">\n              <label>${obstacle.perceived}</label>\n            </div>\n            <h3 style=\"${this.MAIN_STYLE}\">Navigate Test</h3>\n            <div class=\"delete-item-dialog selection\">\n              <label>${obstacle.navigatePerceived}/${obstacle.navigateNotPerceived}</label>\n            </div>\n            <h3 style=\"${this.MAIN_STYLE}\">Consequences</h3>\n            <div class=\"delete-item-dialog selection\">\n              <label>${obstacle.consequences}</label>\n            </div>\n          `;\n          const result = await PursuitDialogHelper.createPursuitDialog({\n            title: `${character.name} encounters ${obstacle.name}`,\n            content: content,\n            buttons: {\n              tackle: {\n                label: 'Tackle Obstacle',\n                callback: () => 0,\n              },\n              fail: {\n                label: 'Suffer Consequences',\n                callback: () => 1,\n              },\n              stop: {\n                label: 'Stop before Obstacle',\n                callback: () => 2,\n              },\n            },\n            defaultButton: 'tackle',\n          }, {width: this.DIALOG_WIDTH + 50});\n          if ((result === 1 && obstacle.stopping === true) || result === 2) {\n            character.distance = obstacle.distance;\n          }\n        }\n      }\n    }\n  }\n\n  normaliseDistance() {\n    const characters = this.getCharacters();\n    let minDistance = characters.reduce((a, b) => a.distance < b.distance ? a : b).distance;\n    for (let object of this.getActive()) {\n      object.distance -= minDistance;\n      if (object.type === 'obstacle' && object.distance < 0) {\n        object.active = false;\n      }\n    }\n\n    // Remove inactive obstacles\n    this.objectsInPursuit = this.objectsInPursuit.filter(o => o.type !== 'obstacle' || o.active);\n  }\n}\n\nclass ComplexPursuit extends SimplePursuit {\n  constructor() {\n    super();\n    this.initialDialogHeader = `<h2 style=\"${this.MAIN_STYLE}\"><b>Environment</b></h2>\n      <div class=\"form-group flexcol\">\n        <select style=\"text-align: center\" id=\"maxDistance\" name=\"maxDistance\">\n          <option value=\"3\">Busy city streets, labyrinthine sewers, hedge maze (3)</option>\n          <option value=\"5\">Craggy mountains, dense woodland, foggy fenland (5)</option>\n          <option value=\"7\">Sleepy village, light woodland, swamp (7)</option>\n          <option value=\"10\" selected>Shrubby meadow, gently rolling hills, rocky beach (10)</option>\n          <option value=\"13\">Featureless desert, grassy steppe, limestone pavement (13)</option>\n        </select>\n      </div>`;\n    this.initialDialogFooter = `<h2 style=\"${this.MAIN_STYLE}\"><b>Escaping from combat</b></h2>\n      <h4><b>Advantage: </b>1 Distance, 3 Distance if spent 3 or more Advantage.</h4>\n      <h4><b>Dodge: </b>1 Distance.</h4>\n      <h4><b>Fleeing: </b>Free Pursuit Test, +2 SL if opponent attacks.</h4>`;\n    this.nextTurnFooter = `\n      <h2 style=\"${this.MAIN_STYLE}\"><b>Distance Update Rules</b></h2>\n      <div style=\"text-align: center\">\n        <h4><b>Roll Pursuit Test:</b></h4>\n        <h4><b>4 SL or more: </b>Distance Moved = (Run / 10) + 1</h4>\n        <h4><b>0 to 3 SL: </b>Distance Moved = (Run / 10)</h4>\n        <h4><b>-2 to -1 SL: </b>Distance Moved = (Run / 10) - 1</h4>\n        <h4><b>-3 to -4 SL: </b>Distance Moved = 0</h4>\n        <h4><b>-5 SL or less: </b>Gain Prone Condition</h4>\n      </div>`;\n  }\n\n  //-------------//\n\n  getCharacterMoveFormatted(character) {\n    return `${character.move} (${character.run})`;\n  }\n\n  getDistanceMoved(character) {\n    if (character.testSL >= 4) {\n      return Math.max(Math.floor(character.run / 10), 1) + 1;\n    } else if (character.testSL >= 0) {\n      return Math.max(Math.floor(character.run / 10), 1);\n    } else if (character.testSL >= -2) {\n      return Math.max(Math.floor(character.run / 10), 1) - 1;\n    } else {\n      return 0;\n    }\n  }\n\n  getDefaultTestSL() {\n    return -4;\n  }\n\n  //-------------//\n\n  getChatPursuitTests() {\n    return this.getCharacters().map(character => {\n      let content = `<h4><b>${character.name}</b> rolls with `;\n      switch (character.move) {\n        case 1:\n          content += '-30 modifier.</h4>';\n          break;\n        case 2:\n          content += '-20 modifier.</h4>.';\n          break;\n        case 3:\n          content += '+0 modifier.</h4>';\n          break;\n        default:\n          content += '+20 modifier.</h4>';\n          break;\n      }\n      return content;\n    }).join('');\n  }\n\n  //-------------//\n\n  processCreatePursuitDialog(html) {\n    super.processCreatePursuitDialog(html);\n\n    const form = new FormDataExtended(html[0].querySelector('form')).object;\n    this.maxDistance = form.maxDistance;\n  }\n}\n\nclass PursuitDialogHelper extends Dialog {\n  static async createPursuitDialog({\n    title,\n    content,\n    buttons,\n    defaultButton,\n  }, options = {}) {\n    return this.wait({\n      title,\n      content: content,\n      focus: true,\n      default: defaultButton,\n      buttons: buttons,\n    }, options);\n  }\n\n  static createPursuitDialogFormatted({\n    title,\n    content,\n    buttons,\n    defaultButton,\n  }, options = {}) {\n    return this.createPursuitDialog({\n      title,\n      content: `\n        <div class=\"delete-item-dialog selection\">\n          <label>${content}</label>\n        </div>`,\n      focus: true,\n      default: defaultButton,\n      buttons: buttons,\n    }, options);\n  }\n}\n\n// Main code\nPursuitDialogHelper.createPursuitDialogFormatted({\n  title: 'Choose Pursuit Mode',\n  content: 'Choose in which mode you want to run this tool.',\n  buttons: {\n    yes: {\n      label: 'Simple (Core)',\n      callback: () => new SimplePursuit().renderCreatePursuitDialog(),\n    },\n    no: {\n      label: 'Complex (UiA)',\n      callback: () => new ComplexPursuit().renderCreatePursuitDialog(),\n    },\n  },\n  defaultButton: 'yes',\n});",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "1.0"
    }
  },
  "folder": null,
  "img": "modules/wfrp4e-macros-and-more/assets/icons/auto-pursuit.svg",
  "name": "Auto-Pursuit",
  "scope": "global",
  "type": "script",
  "_key": "!macros!YcPRalpleYddyR1I"
}
