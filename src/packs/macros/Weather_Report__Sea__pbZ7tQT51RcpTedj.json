{
  "_id": "pbZ7tQT51RcpTedj",
  "author": "MJAZjdKh3QKREKG2",
  "command": "/* ==========\n* MACRO: Random Sea Weather Generator\n* AUTHOR: Robak132\n* DESCRIPTION: Generates weather with Sea of Claws rules.\n========== */\n\nclass Direction {\n  static NORTH = new Direction(0, \"North\");\n  static EAST = new Direction(1, \"East\");\n  static SOUTH = new Direction(2, \"South\");\n  static WEST = new Direction(3, \"West\");\n\n  static values = [Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST];\n\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  static fromKey(key) {\n    return Direction.values[key];\n  }\n\n  static fromValue(value) {\n    return Direction.values.find(e => e.value === value);\n  }\n\n  opposite() {\n    return Direction.values[(this.key + 2) % 4];\n  }\n\n  getArrow() {\n    switch (this.key) {\n      case 0:\n        return \"&#8595;\";\n      case 1:\n        return \"&#8592;\";\n      case 2:\n        return \"&#8593;\";\n      case 3:\n        return \"&#8594;\";\n    }\n  }\n\n  getAdj() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.\" + this.value + \"Adj\");\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.\" + this.value);\n  }\n}\n\nclass WindStrength {\n  static DOLDRUMS = new WindStrength(0, \"Doldrums\");\n  static LIGHT_BREEZE = new WindStrength(1, \"LightBreeze\");\n  static FRESH_BREEZE = new WindStrength(2, \"FreshBreeze\");\n  static NEAR_GALE = new WindStrength(3, \"NearGale\");\n  static STRONG_GALE = new WindStrength(4, \"StrongGale\");\n  static VIOLENT_STORM = new WindStrength(5, \"ViolentStorm\");\n\n  static values = [\n    WindStrength.DOLDRUMS,\n    WindStrength.LIGHT_BREEZE,\n    WindStrength.FRESH_BREEZE,\n    WindStrength.NEAR_GALE,\n    WindStrength.STRONG_GALE,\n    WindStrength.VIOLENT_STORM];\n\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  static fromKey(key) {\n    return WindStrength.values[key];\n  }\n\n  static fromValue(value) {\n    return WindStrength.values.find(e => e.value === value);\n  }\n\n  async randomChange() {\n    if (this.key === WindStrength.values.length - 1) {\n      return WindStrength.values[this.key - 1];\n    } else if (this.key === 0) {\n      return WindStrength.values[this.key + 1];\n    }\n\n    // Random change\n    if ((await new Roll(\"d2\").roll()).total === 1) {\n      return WindStrength.values[this.key - 1];\n    } else {\n      return WindStrength.values[this.key + 1];\n    }\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.\" + this.value);\n  }\n}\n\nclass Precipitation {\n  static NONE = new Precipitation(0, \"None\");\n  static LIGHT = new Precipitation(1, \"Light\");\n  static HEAVY = new Precipitation(2, \"Heavy\");\n  static VERY_HEAVY = new Precipitation(3, \"VeryHeavy\");\n\n  static values = [Precipitation.NONE, Precipitation.LIGHT, Precipitation.HEAVY, Precipitation.VERY_HEAVY];\n\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  static fromKey(key) {\n    return Precipitation.values[key];\n  }\n\n  static fromValue(value) {\n    return Precipitation.values.find(e => e.value === value);\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.Precipitation.\" + this.value);\n  }\n\n  getDescription() {\n    return game.i18n.localize(`SEA-WEATHER-GENERATOR.Precipitation.${this.value}Desc`);\n  }\n}\n\nclass Temperature {\n  static SWELTERING = new Temperature(0, \"Sweltering\");\n  static HOT = new Temperature(1, \"Hot\");\n  static COMFORTABLE = new Temperature(2, \"Comfortable\");\n  static CHILLY = new Temperature(3, \"Chilly\");\n  static BITTER = new Temperature(4, \"Bitter\");\n\n  static values = [\n    Temperature.SWELTERING, Temperature.HOT, Temperature.COMFORTABLE, Temperature.CHILLY, Temperature.BITTER];\n\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  static fromKey(key) {\n    return Temperature.values[key];\n  }\n\n  static fromValue(value) {\n    return Temperature.values.find(e => e.value === value);\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.Temperature.\" + this.value);\n  }\n\n  getDescription() {\n    return game.i18n.localize(`SEA-WEATHER-GENERATOR.Temperature.${this.value}Desc`);\n  }\n}\n\nclass Visibility {\n  static CLEAR = new Visibility(0, \"Clear\");\n  static MISTY = new Visibility(1, \"Misty\");\n  static FOGGY = new Visibility(2, \"Foggy\");\n  static THICK_FOG = new Visibility(3, \"ThickFog\");\n\n  static values = [Visibility.CLEAR, Visibility.MISTY, Visibility.FOGGY, Visibility.THICK_FOG];\n\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  static fromKey(key) {\n    return Visibility.values[key];\n  }\n\n  static fromValue(value) {\n    return Visibility.values.find(e => e.value === value);\n  }\n\n  getName() {\n    return game.i18n.localize(\"SEA-WEATHER-GENERATOR.Visibility.\" + this.value);\n  }\n\n  getDescription() {\n    return game.i18n.localize(`SEA-WEATHER-GENERATOR.Visibility.${this.value}Desc`);\n  }\n}\n\n// Tables\nconst MACRO = this;\nconst PRECIPITATION = [\n  {\n    min: 1,\n    result: Precipitation.NONE,\n  }, {\n    min: 7,\n    result: Precipitation.LIGHT,\n  }, {\n    min: 10,\n    result: Precipitation.HEAVY,\n  }, {\n    min: 11,\n    result: Precipitation.VERY_HEAVY,\n  }, {\n    min: 13,\n    result: Precipitation.HEAVY,\n  }, {\n    min: 14,\n    result: Precipitation.NONE,\n  }];\nconst TEMPERATURE = [\n  {\n    min: 1,\n    result: Temperature.SWELTERING,\n  }, {\n    min: 2,\n    result: Temperature.HOT,\n  }, {\n    min: 3,\n    result: Temperature.COMFORTABLE,\n  }, {\n    min: 9,\n    result: Temperature.CHILLY,\n  }, {\n    min: 13,\n    result: Temperature.BITTER,\n  }];\nconst VISIBILITY = [\n  {\n    min: 1,\n    result: Visibility.CLEAR,\n  }, {\n    min: 5,\n    result: Visibility.MISTY,\n  }, {\n    min: 9,\n    result: Visibility.FOGGY,\n  }, {\n    min: 10,\n    result: Visibility.THICK_FOG,\n  }, {\n    min: 11,\n    result: Visibility.MISTY,\n  }, {\n    min: 14,\n    result: Visibility.CLEAR,\n  }];\nconst WIND_STRENGTH = [\n  {\n    min: 1,\n    result: WindStrength.DOLDRUMS,\n  }, {\n    min: 2,\n    result: WindStrength.LIGHT_BREEZE,\n  }, {\n    min: 3,\n    result: WindStrength.FRESH_BREEZE,\n  }, {\n    min: 5,\n    result: WindStrength.NEAR_GALE,\n  }, {\n    min: 7,\n    result: WindStrength.STRONG_GALE,\n  }, {\n    min: 9,\n    result: WindStrength.VIOLENT_STORM,\n  }, {\n    min: 10,\n    result: WindStrength.NEAR_GALE,\n  }, {\n    min: 11,\n    result: WindStrength.FRESH_BREEZE,\n  }, {\n    min: 13,\n    result: WindStrength.LIGHT_BREEZE,\n  }, {\n    min: 14,\n    result: WindStrength.DOLDRUMS,\n  }];\nconst WIND_EFFECT = {\n  \"Doldrums\": {\n    \"Tailwind\": {\n      sail: {effect: \"BECALMED\"},\n      other: {effect: \"BECALMED\"},\n    },\n    \"Sidewind\": {\n      sail: {effect: \"BECALMED\"},\n      other: {effect: \"BECALMED\"},\n    },\n    \"Headwind\": {\n      sail: {effect: \"BECALMED\"},\n      other: {effect: \"BECALMED\"},\n    },\n  },\n  \"LightBreeze\": {\n    \"Tailwind\": {\n      sail: {modifier: 1},\n      other: {modifier: 1},\n    },\n    \"Sidewind\": {\n      sail: {modifier: 1},\n      other: {modifier: 1},\n    },\n    \"Headwind\": {\n      sail: {modifier: 0.9},\n      other: {modifier: 1},\n    },\n  },\n  \"FreshBreeze\": {\n    \"Tailwind\": {\n      sail: {modifier: 1.1},\n      other: {modifier: 1},\n    },\n    \"Sidewind\": {\n      sail: {\n        modifier: 0.1,\n        effect: \"TACK\",\n      },\n      other: {modifier: 1},\n    },\n    \"Headwind\": {\n      sail: {modifier: 0.75},\n      other: {modifier: 1},\n    },\n  },\n  \"NearGale\": {\n    \"Tailwind\": {\n      sail: {modifier: 1.25},\n      other: {modifier: 1},\n    },\n    \"Sidewind\": {\n      sail: {\n        modifier: 0.25,\n        effect: \"TACK\",\n      },\n      other: {modifier: 1},\n    },\n    \"Headwind\": {\n      sail: {modifier: 0.5},\n      other: {modifier: 0.9},\n    },\n  },\n  \"StrongGale\": {\n    \"Tailwind\": {\n      sail: {modifier: 1.25},\n      other: {modifier: 1.1},\n    },\n    \"Sidewind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {modifier: 0.95},\n    },\n    \"Headwind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {modifier: 0.75},\n    },\n  },\n  \"ViolentStorm\": {\n    \"Tailwind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {effect: \"BATTEN_DOWN\"},\n    },\n    \"Sidewind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {effect: \"BATTEN_DOWN\"},\n    },\n    \"Headwind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {effect: \"BATTEN_DOWN\"},\n    },\n  },\n};\nconst WIND_EFFECT_FLYING_JIB = {\n  \"Doldrums\": {\n    \"Tailwind\": {\n      sail: {effect: \"BECALMED\"},\n      other: {effect: \"BECALMED\"},\n    },\n    \"Sidewind\": {\n      sail: {effect: \"BECALMED\"},\n      other: {effect: \"BECALMED\"},\n    },\n    \"Headwind\": {\n      sail: {effect: \"BECALMED\"},\n      other: {effect: \"BECALMED\"},\n    },\n  },\n  \"LightBreeze\": {\n    \"Tailwind\": {\n      sail: {modifier: 1.1},\n      other: {modifier: 1},\n    },\n    \"Sidewind\": {\n      sail: {modifier: 1},\n      other: {modifier: 1},\n    },\n    \"Headwind\": {\n      sail: {modifier: 0.9},\n      other: {modifier: 1},\n    },\n  },\n  \"FreshBreeze\": {\n    \"Tailwind\": {\n      sail: {modifier: 1.25},\n      other: {modifier: 1},\n    },\n    \"Sidewind\": {\n      sail: {\n        modifier: 0.25,\n        effect: \"TACK\",\n      },\n      other: {modifier: 1},\n    },\n    \"Headwind\": {\n      sail: {modifier: 0.75},\n      other: {modifier: 1},\n    },\n  },\n  \"NearGale\": {\n    \"Tailwind\": {\n      sail: {modifier: 1.25},\n      other: {modifier: 1},\n    },\n    \"Sidewind\": {\n      sail: {\n        modifier: 0.25,\n        effect: \"TACK\",\n      },\n      other: {modifier: 1},\n    },\n    \"Headwind\": {\n      sail: {modifier: 0.5},\n      other: {modifier: 0.9},\n    },\n  },\n  \"StrongGale\": {\n    \"Tailwind\": {\n      sail: {modifier: 1.5},\n      other: {modifier: 1.1},\n    },\n    \"Sidewind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {modifier: 0.95},\n    },\n    \"Headwind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {modifier: 0.75},\n    },\n  },\n  \"ViolentStorm\": {\n    \"Tailwind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {effect: \"BATTEN_DOWN\"},\n    },\n    \"Sidewind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {effect: \"BATTEN_DOWN\"},\n    },\n    \"Headwind\": {\n      sail: {effect: \"BATTEN_DOWN\"},\n      other: {effect: \"BATTEN_DOWN\"},\n    },\n  },\n};\n\nfunction getWindDirectionTable(prevailingWind) {\n  return [\n    {\n      min: 1,\n      result: Direction.fromValue(prevailingWind),\n    }, {\n      min: 7,\n      result: Direction.NORTH,\n    }, {\n      min: 8,\n      result: Direction.SOUTH,\n    }, {\n      min: 9,\n      result: Direction.EAST,\n    }, {\n      min: 10,\n      result: Direction.WEST,\n    }];\n}\n\nfunction getWindName(shipDirection, windDirection) {\n  if (shipDirection === windDirection) {\n    return \"Headwind\";\n  } else if (shipDirection === windDirection.opposite()) {\n    return \"Tailwind\";\n  } else {\n    return \"Sidewind\";\n  }\n}\n\nfunction getSeasonModifier(season) {\n  switch (season) {\n    case \"spring\":\n    case \"autumn\":\n      return 2;\n    case \"winter\":\n      return 4;\n    default:\n      return 0;\n  }\n}\n\nfunction createWindRaport(windStrength, windDirection, windChangeRoll, timeOfDay, options) {\n  const shipDirection = Direction.fromValue(options.shipDirection);\n  const shiftDistance = options.shipSpeed * 4.5;\n  const windName = getWindName(shipDirection, windDirection);\n  const WIND_EFFECT_TABLE = options.flyingJib === \"true\" ? WIND_EFFECT_FLYING_JIB : WIND_EFFECT;\n  const windEffect = WIND_EFFECT_TABLE[windStrength.value][windName][options.shipPropulsion];\n  const modifier = game.robakMacros.utils.round((windEffect?.modifier ?? 1) * 100, 2);\n\n  let result = {\n    description: \"\",\n    normal: 0,\n    tack: 0,\n    drift: 0,\n  };\n\n  result.description = `<h2>${timeOfDay}</h2>`;\n  if (windChangeRoll) {\n    result.description += `<p><b>Wind change roll:</b> ${windChangeRoll}</p>`;\n  }\n  if (windStrength !== WindStrength.DOLDRUMS) {\n    result.description += `<p><b>Wind:</b> ${windDirection.getAdj()} ${windStrength.getName()\n        .toLowerCase()} (${windName})</p>`;\n  } else {\n    result.description += `<p><b>Wind:</b> ${windStrength.getName()}</p>`;\n  }\n  if (windStrength === WindStrength.STRONG_GALE || windStrength === WindStrength.VIOLENT_STORM) {\n    result.description += `<p><i>Every Human, Dwarf, Halfling, or Ogre Character should make a <b>Challenging (+0) Endurance</b> Test or suffer from sea sickness.</i></p>`;\n  }\n\n  switch (windEffect?.effect) {\n    case \"BECALMED\":\n      result.description += `<p><b>Distance Travelled:</b> 0 mi (0%)</p>`;\n      break;\n    case \"TACK\":\n      result.tack = game.robakMacros.utils.round(shiftDistance * windEffect?.modifier, 2);\n      result.description += `\n        <p><b>Distance Travelled:</b> ${shiftDistance} mi (100%)</p>\n        <p><b>Distance Travelled (Tack):</b> +${result.tack} mi (+${modifier}%)</p>`;\n      result.normal = shiftDistance;\n      break;\n    case \"BATTEN_DOWN\":\n      result.drift = game.robakMacros.utils.round((windName.value === \"Tailwind\" ? 1 : -1) * shiftDistance * 0.25, 2);\n      description += `\n        <p><b>Distance Travelled:</b> 0 mi (0%)</p>\n        <p><b>Distance Travelled (Drift):</b> ${result.drift} mi (25%)</p>`;\n      break;\n    default:\n      result.normal = game.robakMacros.utils.round(shiftDistance * windEffect?.modifier, 2);\n      result.description += `<p><b>Distance Travelled:</b> ${result.normal} mi (${modifier}%)</p>`;\n      break;\n  }\n  return {\n    ...result,\n    windStrength,\n    windDirection,\n  };\n}\n\nasync function generateChatMessage(precipitation, temperature, visibility, winds) {\n  await ChatMessage.create({\n    content: `\n      <h1>Sea Weather Report</h1>\n      <p><b>Precipitation:</b> ${precipitation.getName()}</p>\n      <p><i>${precipitation.getDescription()}</i></p>\n      <p><b>Temperature:</b> ${temperature.getName()}</p>\n      <p><i>${temperature.getDescription()}</i></p>\n      <p><b>Visibility:</b> ${visibility.getName()}</p>\n      <p><i>${visibility.getDescription()}</i></p>\n      <h1>Wind Report</h1>\n      ${winds.description}\n      <h1>Total Distance Travelled</h1>\n      <p><b>Base:</b> ${winds.normal} mi</p>\n      ${winds.tack === 0 ? \"\" : `<p><b>Additional Tack Distance:</b> ${winds.tack} mi</p>`}\n      ${winds.drift === 0 ? \"\" : `<p><b>Drift Distance:</b> ${winds.drift} mi</p>`}`,\n    whisper: game.users.filter(u => u.isGM).map(u => u.id),\n  });\n}\n\nfunction tableCellHTML({\n  content,\n  style = \"text-align:center;vertical-align:middle\",\n  rowspan = 1,\n  colspan = 1,\n}) {\n  let colspanTxt = (colspan !== 1) ? `colspan=\"${colspan}\"` : \"\";\n  let rowspanTxt = (rowspan !== 1) ? `rowspan=\"${rowspan}\"` : \"\";\n  return `<td style=\"${style}\" ${rowspanTxt} ${colspanTxt}>${content}</td>`;\n}\n\nfunction tableRowHTML(cells) {\n  return \"<tr>\" + cells.join(\"\") + \"</tr>\";\n}\n\nfunction tableHTML(rows) {\n  return \"<table><tbody>\" + rows.map(r => tableRowHTML(r)).join(\"\") + \"</tbody></table>\";\n}\n\nasync function createJournalEntry() {\n  await JournalEntry.create({\n    name: \"Dziennik kapitański\",\n    content: tableHTML([\n      [\n        tableCellHTML({\n          content: \"<b>Day</b\",\n          rowspan: 2,\n        }),\n        tableCellHTML({\n          content: \"<b>Precipitation</b>\",\n          rowspan: 2,\n        }),\n        tableCellHTML({\n          content: \"<b>Temperature</b>\",\n          rowspan: 2,\n        }),\n        tableCellHTML({\n          content: \"<b>Visibility</b>\",\n          rowspan: 2,\n        }),\n        tableCellHTML({\n          content: \"<b>Winds</b>\",\n          colspan: 4,\n        })], [\n        tableCellHTML({content: \"<b></b\"}),\n        tableCellHTML({content: \"<b>Precipitation</b>\"}),\n        tableCellHTML({content: \"<b>Temperature</b>\"}),\n        tableCellHTML({content: \"<b>Visibility</b>\"})]]),\n  });\n}\n\nasync function fillJournalEntry(captainsLog, precipitation, temperature, visibility, winds) {\n  let content = captainsLog.pages.contents[0].text.content;\n  let table = $(content)[0];\n  let lastDay = parseInt(table.rows[table.rows.length - 1].cells[0].innerText.trim());\n  let row = tableRowHTML([\n    `${lastDay + 1}`,\n    `<span data-toggle=\"tooltip\" title='${precipitation.getDescription()}'>${precipitation.getName()}</span>`,\n    `<span data-toggle=\"tooltip\" title='${temperature.getDescription()}'>${temperature.getName()}</span>`,\n    `<span data-toggle=\"tooltip\" title='${visibility.getDescription()}'>${visibility.getName()}</span>`,\n    `<span data-toggle=\"tooltip\">${winds.elements[0].windStrength.key +\n    1} ${winds.elements[0].windDirection.getArrow()}</span>`,\n    `<span data-toggle=\"tooltip\">${winds.elements[1].windStrength.key +\n    1} ${winds.elements[1].windDirection.getArrow()}</span>`,\n    `<span data-toggle=\"tooltip\">${winds.elements[2].windStrength.key +\n    1} ${winds.elements[2].windDirection.getArrow()}</span>`,\n    `<span data-toggle=\"tooltip\">${winds.elements[3].windStrength.key +\n    1} ${winds.elements[3].windDirection.getArrow()}</span>`,\n    `<span>${winds.normal}/${winds.tack}/${winds.drift}</span>`]);\n\n  await captainsLog.pages.contents[0].update({\n    \"text.content\": content.replace(`</tbody></table>`, row + \"</tbody></table>\"),\n  });\n}\n\nasync function submit(html) {\n  let options = new FormDataExtended(html[0].querySelector(\"form\")).object;\n  let seasonModifier = getSeasonModifier(options.season);\n  let seaTemperatureModifier = options.seaTemperature === \"cold\" ? 0 : -2;\n\n  let precipitation = options.precipitation !== \"Random\"\n      ? Precipitation.fromValue(options.precipitation)\n      : (await game.robakMacros.utils.rollFromCodeObject({\n        table: PRECIPITATION,\n        dice: \"1d10\",\n        modifier: seasonModifier,\n      }))[0];\n  let temperature = options.temperature !== \"Random\"\n      ? Temperature.fromValue(options.temperature)\n      : (await game.robakMacros.utils.rollFromCodeObject({\n        table: TEMPERATURE,\n        dice: \"1d10\",\n        modifier: seasonModifier + seaTemperatureModifier,\n      }))[0];\n  let visibility = options.visibility !== \"Random\"\n      ? Visibility.fromValue(options.visibility)\n      : (await game.robakMacros.utils.rollFromCodeObject({\n        table: VISIBILITY,\n        dice: \"1d10\",\n        modifier: seasonModifier + seaTemperatureModifier,\n      }))[0];\n  let windDirection = options.windDirection !== \"Random\"\n      ? Direction.fromValue(options.windDirection)\n      : (await game.robakMacros.utils.rollFromCodeObject({\n        table: getWindDirectionTable(options.prevailingWind),\n        dice: \"1d10\",\n      }))[0];\n  let windStrength = (await game.robakMacros.utils.rollFromCodeObject({\n    table: WIND_STRENGTH,\n    dice: \"1d10\",\n    modifier: seasonModifier,\n  }))[0];\n  if (options.lastWindStrength !== \"Random\") {\n    windStrength = WindStrength.fromValue(options.lastWindStrength);\n  }\n  if (options.windStrength !== \"Random\") {\n    windStrength = WindStrength.fromValue(options.windStrength);\n  }\n\n  let changeRoll = options.windStrength !== \"Random\" || options.lastWindStrength === \"Random\"\n      ? undefined\n      : (await new Roll(\"d10\").roll()).total;\n\n  let windElements = [];\n  for (const timeOfDay of [\"Dawn\", \"Midday\", \"Dusk\", \"Midnight\"]) {\n    if (changeRoll === 1) {\n      windStrength = await windStrength.randomChange();\n    }\n    windElements.push(createWindRaport(windStrength, windDirection, changeRoll, timeOfDay, options));\n    options.lastWindStrength = `${windStrength.value}`;\n    changeRoll = (await new Roll(\"d10\").roll()).total;\n  }\n  let winds = {\n    elements: windElements, ...windElements.reduce((prev, acc) => {\n      return {\n        normal: Number(prev.normal + acc.normal),\n        tack: Number(prev.tack + acc.tack),\n        drift: Number(prev.drift + acc.drift),\n        description: prev.description + acc.description,\n      };\n    }),\n  };\n\n  await MACRO.setFlag(\"world\", \"sea-weather-generator-options\", options);\n  let captainsLog = game.journal.find(j => j.name === \"Dziennik kapitański\");\n  if (captainsLog === undefined) {\n    await createJournalEntry();\n  }\n  await fillJournalEntry(captainsLog, precipitation, temperature, visibility, winds);\n  await generateChatMessage(precipitation, temperature, visibility, winds);\n}\n\nconst options = MACRO.getFlag(\"world\", \"sea-weather-generator-options\") ?? {\n  precipitation: \"Random\",\n  temperature: \"Random\",\n  visibility: \"Random\",\n  windDirection: \"Random\",\n  windStrength: \"Random\",\n  lastWindStrength: \"Random\",\n  prevailingWind: \"West\",\n  seaTemperature: \"cold\",\n  season: \"spring\",\n  shipDirection: \"West\",\n  shipPropulsion: \"sail\",\n  shipSpeed: 8,\n  flyingJib: false,\n};\n\nnew Dialog({\n  title: `Random Sea Weather Generator`,\n  content: `<form>\n      <div class=\"form-group section-title\">\n        <label class=\"section-title\">Sea Weather Elements</label>\n      </div>\n      <div class=\"form-group\">\n        <label>Precipitation:</label>\n        <select name=\"precipitation\">\n          <option value=\"Random\" ${options.precipitation === \"Random\" ? \"selected\" : \"\"}>Random</option>\n          ${Precipitation.values.map(e => {\n    return `<option value=\"${e.value}\" ${options.precipitation === e.value ? \"selected\" : \"\"}>${e.getName()}</option>`;\n  })}.join()\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Temperature:</label>\n        <select name=\"temperature\">\n          <option value=\"Random\" ${options.temperature === \"Random\" ? \"selected\" : \"\"}>Random</option>\n          ${Temperature.values.map(e => {\n    return `<option value=\"${e.value}\" ${options.temperature === e.value ? \"selected\" : \"\"}>${e.getName()}</option>`;\n  })}.join()\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Visibility:</label>\n        <select name=\"visibility\">\n          <option value=\"Random\" ${options.visibility === \"Random\" ? \"selected\" : \"\"}>Random</option>\n          ${Visibility.values.map(e => {\n    return `<option value=\"${e.value}\" ${options.visibility === e.value ? \"selected\" : \"\"}>${e.getName()}</option>`;\n  })}.join()\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Wind Direction:</label>\n        <select name=\"windDirection\">\n          <option value=\"Random\" ${options.windDirection === \"Random\" ? \"selected\" : \"\"}>Random</option>\n          ${Direction.values.map(e => {\n    return `<option value=\"${e.value}\" ${options.windDirection === e.value ? \"selected\" : \"\"}>${e.getName()}</option>`;\n  })}.join()\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Wind Strength:</label>\n        <select name=\"windStrength\">\n          <option value=\"Random\" ${options.windStrength === \"Random\" ? \"selected\" : \"\"}>Random</option>\n          ${WindStrength.values.map(e => {\n    return `<option value=\"${e.value}\" ${options.windStrength === e.value ? \"selected\" : \"\"}>${e.getName()}</option>`;\n  })}.join()\n        </select>\n      </div>\n      <div class=\"form-group section-title\">\n        <label class=\"section-title\">External Conditions</label>\n      </div>\n      <div class=\"form-group\">\n        <label>Season:</label>\n        <select name=\"season\">\n          <option value=\"spring\" ${options.season === \"spring\" ? \"selected\" : \"\"}>Spring</option>\n          <option value=\"summer\" ${options.season === \"summer\" ? \"selected\" : \"\"}>Summer</option>\n          <option value=\"autumn\" ${options.season === \"autumn\" ? \"selected\" : \"\"}>Autumn</option>\n          <option value=\"winter\" ${options.season === \"winter\" ? \"selected\" : \"\"}>Winter</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Sea Temperature:</label>\n        <select name=\"seaTemperature\">\n          <option value=\"cold\" ${options.seaTemperature === \"cold\" ? \"selected\" : \"\"}>Cold</option>\n          <option value=\"warm\" ${options.seaTemperature === \"warm\" ? \"selected\" : \"\"}>Warm</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Prevailing Winds Direction:</label>\n        <select name=\"prevailingWind\">\n          <option value=\"West\" ${options.prevailingWind === \"West\" ? \"selected\" : \"\"}>Westerly</option>\n          <option value=\"South\" ${options.prevailingWind === \"South\" ? \"selected\" : \"\"}>Southerly</option>\n          <option value=\"East\" ${options.prevailingWind === \"East\" ? \"selected\" : \"\"}>Easterly</option>\n          <option value=\"North\" ${options.prevailingWind === \"North\" ? \"selected\" : \"\"}>Northerly</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Wind Strength at Midnight:</label>\n        <select name=\"lastWindStrength\">\n          <option value=\"Random\" ${options.lastWindStrength === \"Random\" ? \"selected\" : \"\"}>Random</option>\n          ${WindStrength.values.map(e => {\n    return `<option value=\"${e.value}\" ${options.lastWindStrength === e.value\n        ? \"selected\"\n        : \"\"}>${e.getName()}</option>`;\n  })}.join()\n        </select>\n      </div>\n      <div class=\"form-group section-title\">\n        <label class=\"section-title\">Ship</label>\n      </div>\n      <div class=\"form-group\">\n        <label>Ship Direction:</label>\n        <select name=\"shipDirection\">\n          <option value=\"West\" ${options.shipDirection === \"West\" ? \"selected\" : \"\"}>West</option>\n          <option value=\"South\" ${options.shipDirection === \"South\" ? \"selected\" : \"\"}>South</option>\n          <option value=\"East\" ${options.shipDirection === \"East\" ? \"selected\" : \"\"}>East</option>\n          <option value=\"North\" ${options.shipDirection === \"North\" ? \"selected\" : \"\"}>North</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Flying Jib:</label>\n        <select name=\"flyingJib\">\n          <option value=\"true\" ${options.flyingJib === \"true\" ? \"selected\" : \"\"}>Equipped</option>\n          <option value=\"false\" ${options.flyingJib !== \"true\" ? \"selected\" : \"\"}>Not Equipped</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Ship Propulsion:</label>\n        <select name=\"shipPropulsion\">\n          <option value=\"sail\" ${options.shipPropulsion === \"sail\" ? \"selected\" : \"\"}>Sail</option>\n          <option value=\"other\" ${options.shipPropulsion === \"other\" ? \"selected\" : \"\"}>Other</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Ship Speed:</label>\n        <input name=\"shipSpeed\" value=${options.shipSpeed} type=\"number\" min=\"0\">\n      </div>\n    </form>`,\n  buttons: {\n    no: {\n      icon: `<i class='fas fa-times'></i>`,\n      label: `Cancel`,\n    },\n    yes: {\n      icon: `<i class='fas fa-check'></i>`,\n      label: `Submit`,\n      callback: async (html) => await submit(html),\n    },\n  },\n  default: \"yes\",\n}).render(true);",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "2.0.2"
    }
  },
  "folder": null,
  "img": "modules/wfrp4e-macros-and-more/assets/icons/sea-weather-generator.svg",
  "name": "Weather Report (Sea)",
  "scope": "global",
  "type": "script",
  "_key": "!macros!pbZ7tQT51RcpTedj"
}
