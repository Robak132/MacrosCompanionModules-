{
  "_id": "BePzQIhToFpTWdJw",
  "author": "MJAZjdKh3QKREKG2",
  "command": "/* ==========\n* MACRO: Inventory Manager\n* VERSION: 1.0\n* AUTHOR: Robak132\n* DESCRIPTION: Allows for easy item movement between containers and actors.\n========== */\n\nclass InventoryManager {\n  render() {\n    new Dialog({\n      title: 'Inventory Manager',\n      content: this.getHTMLForm(),\n      buttons: {\n        confirm: {\n          icon: '<i class=\"fas fa-check\"></i>',\n          label: 'Move Items',\n          callback: (html) => this.transferItems(html)\n        },\n        cancel: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: 'Cancel',\n        },\n      },\n      default: 'confirm',\n    },  {width: 750}).render();\n  }\n\n  formatItemEnc(x) {\n    const sourceItem = x._source;\n    let lightweightBonus = sourceItem.system.qualities != null &&\n    sourceItem.system.qualities.value.some(q => q.name === 'lightweight') ? -1 : 0;\n    let fullValue = Number(\n        Math.max(sourceItem.system.encumbrance.value + lightweightBonus, 0) * x.system.quantity.value);\n    let currentValue = Number(x.system.encumbrance.value);\n    if (fullValue.toFixed(2) === currentValue.toFixed(2)) {\n      return `${currentValue}`;\n    } else {\n      return `${currentValue} (${fullValue})`;\n    }\n  }\n  \n  groupBy(list, func) {\n    return list.reduce((rv, x) => {\n      rv[func(x)] = rv[func(x)] ?? [];\n      rv[func(x)].push(x);\n      return rv;\n    }, {});\n  }\n\n  getItemType(x) {\n    let type = x.type === 'trapping' ? x.system.trappingType.value : x.type;\n    return type === '' ? 'misc' : type;\n  }\n\n  getCategoryOrder(x) {\n    switch (x) {\n      case 'weapon':\n        return 3;\n      case 'ammunition':\n        return 2;\n      case 'armour':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  groupActorItems(actor) {\n    let items = [\n      ...actor.itemTypes.weapon,\n      ...actor.itemTypes.ammunition,\n      ...actor.itemTypes.armour,\n      ...actor.itemTypes.money,\n      ...actor.itemTypes.trapping].\n        sort((a, b) => a.name.localeCompare(b.name, 'pl')).\n        sort((a, b) => a.encumbrance.value > b.encumbrance.value ? -1 : 1);\n\n    let itemsCategorised = this.groupBy(items, x => game.robakMacros.utils.clean(x.location.value));\n    for (let [key, value] of Object.entries(itemsCategorised)) {\n      value = this.groupBy(value, x => this.getItemType(x));\n      itemsCategorised[key] = Object.fromEntries(Object.entries(value).sort((a, b) => {\n        if (this.getCategoryOrder(a[0]) === this.getCategoryOrder(b[0])) {\n          return game.i18n.localize(WFRP4E.trappingCategories[b[0]]).\n              localeCompare(game.i18n.localize(WFRP4E.trappingCategories[a[0]]), 'pl');\n        }\n        return this.getCategoryOrder(a[0]) < this.getCategoryOrder(b[0]) ? 1 : -1;\n      }));\n    }\n    return itemsCategorised;\n  }\n\n  getHTMLActorHeader(actor) {\n    return `\n      <h3 style=\"font-family: CaslonAntique,serif;font-size: 30px;font-variant: small-caps;font-weight: bold\">\n        ${actor.name.toLocaleUpperCase('pl')}\n        (${actor.system.status.encumbrance.current}/${actor.system.status.encumbrance.max})\n      </h3>`;\n  }\n\n  getHTMLContainerHeader(containerItems, container) {\n    let containerItemsEnc = Number(Object.values(containerItems).\n        reduce((sum, cat) => sum + Number(cat.reduce((catSum, i) => catSum + Number(i.encumbrance.value), 0)), 0));\n    if (containerItemsEnc % 1 !== 0) {\n      containerItemsEnc = containerItemsEnc.toFixed(2);\n    }\n    return `\n        <h3>\n          <div class=\"form-group\">\n            <span style=\"flex: 1;text-align: center\">${this.formatItemEnc(container.value)}</span>\n            <span style=\"flex: 10\">${container.name} (${containerItemsEnc}/${container.value.carries.value ?? '-'})</span>\n          </div>\n        </h3>`;\n  }\n\n  getHTMLItemList(containerItems, containerId, actorId) {\n    let form = ``;\n    for (const [categoryName, categoryList] of Object.entries(containerItems)) {\n      if (categoryList.length > 0) {\n        let categoryEnc = Number(categoryList.reduce((acc, x) => acc + Number(x.encumbrance.value), 0));\n        if (categoryEnc % 1 !== 0) {\n          categoryEnc = categoryEnc.toFixed(2);\n        }\n        form += `\n            <p style=\"text-align: center;font-variant: small-caps;font-weight: bold;\">\n              ${game.i18n.localize(WFRP4E.trappingCategories[categoryName])} (${categoryEnc})\n            </p>`;\n        for (const item of categoryList) {\n          form += `\n              <div class=\"form-group\">\n                <span style=\"flex: 1;text-align: center\">${this.formatItemEnc(item)}</span>\n                <span style=\"flex: 5;text-align: center\">${item.name}</span>\n                <span style=\"flex: 1;text-align: center\">${item.quantity.value}</span>\n                <span style=\"flex: 1;text-align: center\">&#8594;</span>\n                <select style=\"flex: 3\" \n                        data-item=\"${item.id}\"\n                        data-source-actor=\"${actorId}\"\n                        data-source-container=\"${containerId}\">\n                <option selected></option>\n                ${game.robakMacros.transferItem.createSelectTag(actorId, containerId)}\n                </select>\n              </div>`;\n        }\n      }\n    }\n    return form;\n  }\n\n  getHTMLForm() {\n    let form = `<form><div style=\"overflow-y: scroll;height: 500px\">`;\n    for (const actor of game.robakMacros.utils.getStashableActors()) {\n      const items = this.groupActorItems(actor);\n      const actorItems = items[''] ?? {};\n\n      form += this.getHTMLActorHeader(actor);\n      form += this.getHTMLItemList(actorItems, '', actor.id);\n      for (const container of game.robakMacros.utils.getContainers(actor)) {\n        const containerItems = items[container.id] ?? {};\n        if (Object.values(containerItems).length === 0) continue;\n\n        form += this.getHTMLContainerHeader(containerItems, container);\n        form += this.getHTMLItemList(containerItems, container.id, actor.id);\n      }\n    }\n    form += `</div></form>`;\n    return form;\n  }\n\n  async transferItems(html) {\n    let itemTransfers = $(html).find('select').map((_, e) => {\n      return {\n        item: game.actors.get(e.dataset.sourceActor).items.get(e.dataset.item),\n        targetActorId: e.options[e.options.selectedIndex].dataset.targetActor,\n        targetContainerId: e.options[e.options.selectedIndex].dataset.targetContainer,\n        sourceActorId: e.dataset.sourceActor,\n        sourceContainerId: e.dataset.sourceContainer,\n        quantity: game.actors.get(e.dataset.sourceActor).items.get(e.dataset.item).system.quantity.value\n      };\n    }).get().filter(s => s.targetContainerId != null && s.targetActorId != null);\n    await game.robakMacros.transferItem.transferItems(itemTransfers)\n  }\n}\n\nnew InventoryManager().render()",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "1.0"
    }
  },
  "folder": null,
  "img": "modules/wfrp4e-macros-and-more/assets/icons/inventory-manager.svg",
  "name": "Inventory Manager",
  "type": "script",
  "_key": "!macros!BePzQIhToFpTWdJw"
}
