{
  "_id": "BePzQIhToFpTWdJw",
  "author": "MJAZjdKh3QKREKG2",
  "command": "/* ==========\n* MACRO: Inventory Manager\n* AUTHOR: Robak132\n* DESCRIPTION: Allows for easy item movement between containers and actors.\n========== */\n\nclass InventoryManager {\n  constructor() {\n    new Dialog(\n      {\n        title: \"Inventory Manager\",\n        content: this.getHTMLForm(),\n        buttons: {\n          confirm: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"Move Items\",\n            callback: (html) => this.transferItems(html)\n          },\n          cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\"\n          }\n        },\n        default: \"confirm\"\n      },\n      {width: 850}\n    ).render(true);\n  }\n\n  formatItemEnc(x) {\n    const sourceItem = x._source;\n    const lightweightBonus =\n      sourceItem.system.qualities != null && sourceItem.system.qualities.value.some((q) => q.name === \"lightweight\")\n        ? -1\n        : 0;\n    const fullValue = Number(\n      Math.max(sourceItem.system.encumbrance.value + lightweightBonus, 0) * x.system.quantity.value\n    );\n    const currentValue = Number(x.system.encumbrance.value);\n    if (fullValue.toFixed(2) === currentValue.toFixed(2)) {\n      return `${currentValue}`;\n    } else {\n      return `${currentValue} (${fullValue})`;\n    }\n  }\n\n  groupBy(list, func) {\n    return list.reduce((rv, x) => {\n      rv[func(x)] = rv[func(x)] ?? [];\n      rv[func(x)].push(x);\n      return rv;\n    }, {});\n  }\n\n  getItemType(x) {\n    const type = x.type === \"trapping\" ? x.system.trappingType.value : x.type;\n    return type === \"\" ? \"misc\" : type;\n  }\n\n  getCategoryOrder(x) {\n    switch (x) {\n      case \"weapon\":\n        return 3;\n      case \"ammunition\":\n        return 2;\n      case \"armour\":\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  groupActorItems(actor) {\n    const items = [\n      ...actor.itemTypes.weapon,\n      ...actor.itemTypes.ammunition,\n      ...actor.itemTypes.armour,\n      ...actor.itemTypes.money,\n      ...actor.itemTypes.trapping\n    ]\n      .sort((a, b) => a.name.localeCompare(b.name, \"pl\"))\n      .sort((a, b) => (a.encumbrance.value > b.encumbrance.value ? -1 : 1));\n\n    const itemsCategorised = this.groupBy(items, (x) => game.robakMacros.utils.clean(x.location.value));\n    for (let [key, value] of Object.entries(itemsCategorised)) {\n      value = this.groupBy(value, (x) => this.getItemType(x));\n      itemsCategorised[key] = Object.fromEntries(\n        Object.entries(value).sort((a, b) => {\n          if (this.getCategoryOrder(a[0]) === this.getCategoryOrder(b[0])) {\n            return game.i18n\n              .localize(WFRP4E.trappingCategories[b[0]])\n              .localeCompare(game.i18n.localize(WFRP4E.trappingCategories[a[0]]), \"pl\");\n          }\n          return this.getCategoryOrder(a[0]) < this.getCategoryOrder(b[0]) ? 1 : -1;\n        })\n      );\n    }\n    return itemsCategorised;\n  }\n\n  getHTMLActorHeader(actor) {\n    return `\n      <h3 style=\"font-family: CaslonAntique,serif;font-size: 30px;font-variant: small-caps;font-weight: bold\">\n        ${actor.name.toLocaleUpperCase(\"pl\")}\n        (${actor.system.status.encumbrance.current}/${actor.system.status.encumbrance.max})\n      </h3>`;\n  }\n\n  getHTMLContainerHeader(containerItems, container) {\n    let containerItemsEnc = Number(\n      Object.values(containerItems).reduce(\n        (sum, cat) => sum + Number(cat.reduce((catSum, i) => catSum + Number(i.encumbrance.value), 0)),\n        0\n      )\n    );\n    if (containerItemsEnc % 1 !== 0) {\n      containerItemsEnc = containerItemsEnc.toFixed(2);\n    }\n    return `\n        <h3>\n          <div class=\"form-group\">\n            <span style=\"flex: 1;text-align: center\">${this.formatItemEnc(container.value)}</span>\n            <span style=\"flex: 10\">${container.name} (${containerItemsEnc}/${container.value.carries.value ?? \"-\"})</span>\n          </div>\n        </h3>`;\n  }\n\n  getHTMLItemList(containerItems, containerId, actorId) {\n    let form = \"\";\n    for (const [categoryName, categoryList] of Object.entries(containerItems)) {\n      if (categoryList.length > 0) {\n        let categoryEnc = Number(categoryList.reduce((acc, x) => acc + Number(x.encumbrance.value), 0));\n        if (categoryEnc % 1 !== 0) {\n          categoryEnc = categoryEnc.toFixed(2);\n        }\n        form += `\n            <p style=\"text-align: center;font-variant: small-caps;font-weight: bold;\">\n              ${game.i18n.localize(WFRP4E.trappingCategories[categoryName])} (${categoryEnc})\n            </p>`;\n        for (const item of categoryList) {\n          form += `\n              <div class=\"form-group\">\n                <span style=\"flex: 1;text-align: center\">${this.formatItemEnc(item)}</span>\n                <span style=\"flex: 5;text-align: center\">${item.name}</span>\n                <span style=\"flex: 1;text-align: center\">${item.quantity.value}</span>\n                <input style=\"flex: 3\" class=\"slider\" name=\"${item.id}\" min=\"0\" max=\"${item.system.quantity.value}\" value=\"0\" type=\"range\">\n                <input style=\"flex: 1;text-align: center\" name=\"${item.id}\" min=\"0\" max=\"${item.system.quantity.value}\" value=\"0\" type=\"number\">\n                <span style=\"flex: 1;text-align: center\">&#8594;</span>\n                <select style=\"flex: 3\" \n                        name=\"${item.id}\"\n                        data-item=\"${item.id}\"\n                        data-source-actor=\"${actorId}\"\n                        data-source-container=\"${containerId}\">\n                <option selected label=\"\"></option>\n                ${game.robakMacros.transferItem.createSelectTag(actorId, containerId)}\n                </select>\n              </div>`;\n        }\n      }\n    }\n    return form;\n  }\n\n  getHTMLForm() {\n    let form = '<form><div style=\"overflow-y: scroll;height: 500px\">';\n    for (const actor of game.robakMacros.utils.getStashableActors()) {\n      const items = this.groupActorItems(actor);\n      const actorItems = items[\"\"] ?? {};\n\n      form += this.getHTMLActorHeader(actor);\n      form += this.getHTMLItemList(actorItems, \"\", actor.id);\n      for (const container of game.robakMacros.utils.getContainers(actor)) {\n        const containerItems = items[container.id] ?? {};\n        if (Object.values(containerItems).length === 0) {\n          continue;\n        }\n\n        form += this.getHTMLContainerHeader(containerItems, container);\n        form += this.getHTMLItemList(containerItems, container.id, actor.id);\n      }\n    }\n    form += `</div></form>\n      <script>\n        $(\"input[type=range]\").on(\"input\", function() {\n          document.getElementsByName(this.name)[1].value = this.value\n        });\n        $(\"input[type=number]\").on(\"input\", function() {\n          document.getElementsByName(this.name)[0].value = this.value\n        });\n        $(\"select\").on(\"input\", function() {\n          let slider = document.getElementsByName(this.name)[0]\n          let input = document.getElementsByName(this.name)[1]\n          if (input.value === \"0\") {\n            slider.value = slider.max\n            input.value = slider.max\n          }\n          if (this.options[this.options.selectedIndex].label === \"\") {\n            slider.value = slider.min\n            input.value = slider.min\n          }\n        });\n      </script>`;\n    return form;\n  }\n\n  async transferItems(html) {\n    const itemTransfers = $(html)\n      .find(\"select\")\n      .map((_, e) => {\n        return {\n          item: game.actors.get(e.dataset.sourceActor).items.get(e.dataset.item),\n          targetActorId: e.options[e.options.selectedIndex].dataset.targetActor,\n          targetContainerId: e.options[e.options.selectedIndex].dataset.targetContainer,\n          sourceActorId: e.dataset.sourceActor,\n          sourceContainerId: e.dataset.sourceContainer,\n          quantity: Number($(html).find(`input[type=number][name=${e.dataset.item}]`).val())\n        };\n      })\n      .get()\n      .filter((s) => s.targetContainerId != null && s.targetActorId != null);\n    console.log(itemTransfers);\n    await game.robakMacros.transferItem.transferItems(itemTransfers);\n  }\n}\n\nnew InventoryManager();\n",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "1.1.0"
    }
  },
  "folder": null,
  "img": "modules/wfrp4e-macros-and-more/assets/icons/inventory-manager.svg",
  "name": "Inventory Manager",
  "scope": "global",
  "type": "script",
  "_key": "!macros!BePzQIhToFpTWdJw"
}
