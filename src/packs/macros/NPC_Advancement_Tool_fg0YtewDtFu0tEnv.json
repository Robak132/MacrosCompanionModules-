{
  "_id": "fg0YtewDtFu0tEnv",
  "author": "MJAZjdKh3QKREKG2",
  "command": "main();\n\nasync function getCareers() {\n  let careerList = {};\n  let careers = await game.wfrp4e.utility.findAll('career', game.i18n.localize('CAREER.Loading'));\n  careers.forEach((tier, i) => {\n    let clsObject = careerList[tier.system.class.value] ?? {};\n    let careerGroup = clsObject[tier.system.careergroup.value] ?? [];\n    careerGroup.push({\n      link: tier.link,\n      level: tier.level.value,\n      img: tier.img,\n      name: tier.name,\n      index: i,\n      careerGroup: tier.system.careergroup.value,\n      careerClass: tier.system.class.value\n    });\n    clsObject[tier.system.careergroup.value] = careerGroup;\n    careerList[tier.system.class.value] = clsObject;\n  });\n  return careerList;\n}\n\nasync function sortCareers(careerList) {\n  let sortedCareerList = {};\n  for (let [careerClass, careerGroups] of Object.entries(careerList)) {\n    let sortedCareerGroups = {};\n    for (let [careerGroup, careers] of Object.entries(careerGroups)) {\n      sortedCareerGroups[careerGroup] = careers.sort((a, b) => a.level - b.level);\n    }\n    sortedCareerList[careerClass] = Object.fromEntries(Object.entries(sortedCareerGroups).sort());\n  }\n  sortedCareerList = Object.fromEntries(Object.entries(sortedCareerList).sort());\n  return sortedCareerList;\n}\n\nasync function getCareerOptions() {\n  let careerList = await getCareers()\n  careerList = await sortCareers(careerList)\n  let result = \"\"\n  for (let [careerClass, careerGroups] of Object.entries(careerList)) {\n    result += `<option disabled>${careerClass}</option>`\n    for (let [careerGroup, careers] of Object.entries(careerGroups)) {\n      result += `<option disabled>&nbsp;&nbsp;${careerGroup}</option>`\n      for (let career of careers) {\n        result += `<option value=\"${career.index}\">&nbsp;&nbsp;&nbsp;&nbsp;${career.level} - ${career.name}</option>`\n      }\n    }\n  }\n  return result;\n}\n\nasync function submit() {}\n\nasync function main() {\n  let careerOptions = await getCareerOptions()\n  await new Dialog({\n    title: 'NPC Advancement Tool',\n    content: `<form>\n        <div class=\"form-group\">\n          <p style=\"flex: 1\" class=\"section-title\">Attributes</p>\n          <select style=\"flex: 2\" name=\"characteristics\">\n            <option value=\"0\">Average</option>\n            <option value=\"5\">Above Average</option>\n            <option value=\"10\">Perfect Specimen</option>\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <p style=\"flex: 1\" class=\"section-title\">Career</p>\n          <select style=\"flex: 2\">\n            ${careerOptions}\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <p style=\"flex: 1\" class=\"section-title\">Competency</p>\n          <select style=\"flex: 2\">\n            <option value=\"1\">Competent</option>\n            <option value=\"2\">Proficient</option>\n            <option value=\"3\">Veteran</option>\n            <option value=\"4\">Elite</option>\n            <option value=\"5\">Apex</option>\n          </select>\n        </div>\n      </form>`,\n    buttons: {\n      no: {\n        icon: `<i class='fas fa-times'></i>`,\n        label: game.i18n.localize('Cancel'),\n      },\n      yes: {\n        icon: `<i class='fas fa-check'></i>`,\n        label: game.i18n.localize('Apply'),\n        callback: async (html) => await submit(html),\n      },\n    },\n    default: 'yes',\n  }, {width: 500}).render(true);\n}",
  "flags": {
    "wfrp4e-macros-and-more": {
      "version": "1.0.0"
    }
  },
  "folder": null,
  "img": "icons/svg/dice-target.svg",
  "name": "NPC Advancement Tool",
  "scope": "global",
  "type": "script",
  "_key": "!macros!fg0YtewDtFu0tEnv"
}
